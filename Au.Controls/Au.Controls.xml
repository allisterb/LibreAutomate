<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Au.Controls</name>
    </assembly>
    <members>
        <member name="T:Au.Controls.KPanels">
            <summary>
            Creates and manages window layout like in Visual Studio.
            Multiple docked movable/sizable/tabable/floatable/hidable/savable panels/toolbars/documents with splitters.
            </summary>
            <remarks>
            Layout is defined in default XML file, then saved in other XML file. See Layout.xml in Aedit project.
            If new app version adds/removes/renames panels etc, this class automatically updates the saved layout.
            
            Let your window's ctor:
            - call <see cref="M:Au.Controls.KPanels.Load(System.String,System.String)"/>;
            - set content of all leaf items (panels, toolbars, document placeholder) like <c>_panels["Files"].Content = new TreeView();</c>;
            - set <see cref="P:Au.Controls.KPanels.Container"/> like <c>_panels.Container = g => this.Content = g;</c>. The action is called immediately and also may be called later if need to create new root element when moving a panel etc.
            If want to save user-customized layout, call <see cref="M:Au.Controls.KPanels.Save"/> when closing window or at any time before it.
            </remarks>
        </member>
        <member name="P:Au.Controls.KPanels._Node._Stack_DockedNodes">
            <summary>
            Gets nodes docked and really visible in this stack (not in tab, not floating, not hidden).
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node._IsDockedInStack">
            <summary>
            true if parent is stack and this is docked and not floating/hidden.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node._AddToStack(System.Boolean,System.Int32)">
            <summary>
            Adds elements of this to parent stack. Creates splitter if need, adds row/column, sets element properties (caption etc).
            </summary>
            <param name="moving">Called when moving this. Inserts, shifts sibling indices, etc. If false, adds as last item in stack.</param>
            <param name="splitterSize"></param>
        </member>
        <member name="M:Au.Controls.KPanels._Node._ReplaceInStack(Au.Controls.KPanels._Node)">
            <summary>
            Replaces target with this in parent stack.
            Used when moving, to create new parent (this) tab or stack for target and the moved node.
            Does not add/remove tree nodes.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node._RemoveGridRowCol(System.Windows.FrameworkElement)">
            <summary>
            Removes an element of this from parent stack grid. Removes its row/column and shifts sibling indices.
            </summary>
            <param name="e">_elem or _splitter</param>
        </member>
        <member name="M:Au.Controls.KPanels._Node._Stack_UpdateSplittersVisibility">
            <summary>
            This must be stack. Hides splitter of first visible child and shows splitters of other visible children.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node._SplitterSize">
            <summary>
            Gets or sets actual height of <see cref="F:Au.Controls.KPanels._Node._splitter"/> in vertical stack or width in horizontal stack.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node._SizeDef">
            <summary>
            Gets or sets defined row height/unit in vertical stack or column width/unit in horizontal stack.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node._SizeMin">
            <summary>
            Gets or sets minimal row height in vertical stack or column width in horizontal stack.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node._ChangeSizeUnit(System.Windows.GridUnitType,System.Boolean)">
            <summary>
            Sets size = actual size and new unit.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node._AddToTab(System.Boolean)">
            <summary>
            Adds this to parent tab at startup or when moving.
            Caller before must call AddChild (or AddSibling) and set _index.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node.#ctor(Au.Controls.KPanels,System.Xml.Linq.XElement)">
            <summary>
            Used to create root node when loading from XML.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node.#ctor(Au.Controls.KPanels,System.Xml.Linq.XElement,Au.Controls.KPanels._Node,System.Int32)">
            <summary>
            Used to create nodes when loading from XML.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node.#ctor(Au.Controls.KPanels._Node,System.Boolean,System.Boolean)">
            <summary>
            Used when moving a node, to create new parent (this) stack or tab for it and target.
            Also when moving a node, to create new parent (this) tab for it (target).
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node.#ctor(Au.Controls.KPanels._Node,System.Boolean,Au.Controls.KPanels.LeafType,System.String,System.Boolean)">
            <summary>
            Used when creating new leaf node later (after loading).
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node._IsToolbarsNode">
            <summary>
            true if this is toolbar or this is stack/tab containing only toolbars.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node._IsDocumentsNode">
            <summary>
            true if this is document or this is tab containing documents (or tab with 0 children, which normally is not possible).
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node.Name">
            <summary>
            Gets name of panel/toolbar/document. Exception if not leaf.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node.Elem">
            <summary>
            Gets the UI element of this node. It is Grid if this is stack, or TabControl if tab, else DockPanel.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._Node._CanHaveCaptionWithText">
            <summary>
            true if _IsPanel or (_IsDocument and _leaf.addedLater).
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels._Node._IsVisibleReally(System.Boolean)">
            <summary>
            Returns true if this node does not have hidden state and is not docked in hidden tab.
            </summary>
        </member>
        <member name="T:Au.Controls.KPanels.ILeaf">
            <summary>
            Interface for a leaf item (panel, toolbar or document).
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.ILeaf.Content">
            <summary>
            Gets or sets content of panel/toolbar/document.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.ILeaf.Visible">
            <summary>
            true if visible, either floating or docked.
            The 'get' function returns true even if inactive tab item. The 'set' function makes tab item active.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.ILeaf.Floating">
            <summary>
            true if floating and visible.
            false if docked or hidden.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels.ILeaf.AddSibling(System.Boolean,Au.Controls.KPanels.LeafType,System.String,System.Boolean)">
            <summary>
            Adds new leaf item (panel, toolbar or document) before or after this.
            </summary>
            <param name="after"></param>
            <param name="type"></param>
            <param name="name"></param>
            <param name="canClose">Add "Close    M-click" item in context menu. It will fire <see cref="E:Au.Controls.KPanels.ILeaf.Closing"/> event and call <see cref="M:Au.Controls.KPanels.ILeaf.Delete"/> if not cancelled.</param>
            <returns>Returns interface of the new item.</returns>
            <exception cref="T:System.ArgumentException"><i>type</i> is not Panel/Toolbar/Document, or <i>name</i> is null, or <i>name</i> panel already exists.</exception>
            <remarks>
            Added items can be deleted with <see cref="M:Au.Controls.KPanels.ILeaf.Delete"/>. Will not be saved.
            Add documents only by the document placeholder or by added documents. Don't add other nodes by documents.
            </remarks>
        </member>
        <member name="M:Au.Controls.KPanels.ILeaf.Delete">
            <summary>
            Deletes this leaf item added with <see cref="M:Au.Controls.KPanels.ILeaf.AddSibling(System.Boolean,Au.Controls.KPanels.LeafType,System.String,System.Boolean)"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Added not with <b>AddSibling</b>.</exception>
        </member>
        <member name="M:Au.Controls.KPanels.ILeaf.Rename(System.String)">
            <summary>
            Renames this document.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.ILeaf.Parent">
            <summary>
            Gets parent elements and index.
            </summary>
        </member>
        <member name="E:Au.Controls.KPanels.ILeaf.VisibleChanged">
            <summary>
            After hiding or showing this leaf item.
            </summary>
        </member>
        <member name="E:Au.Controls.KPanels.ILeaf.FloatingChanged">
            <summary>
            After made floating or non-floating this leaf item.
            </summary>
        </member>
        <member name="E:Au.Controls.KPanels.ILeaf.Closing">
            <summary>
            When user tries to close this leaf item.
            Only if added with <see cref="M:Au.Controls.KPanels.ILeaf.AddSibling(System.Boolean,Au.Controls.KPanels.LeafType,System.String,System.Boolean)"/> with <i>canClose</i> true.
            </summary>
        </member>
        <member name="E:Au.Controls.KPanels.ILeaf.TabSelected">
            <summary>
            When this tab item selected (becomes the active item).
            </summary>
        </member>
        <member name="E:Au.Controls.KPanels.ILeaf.ParentChanged">
            <summary>
            When moved to other tab or stack.
            </summary>
        </member>
        <member name="T:Au.Controls.KPanels.LeafType">
            <summary>Leaf item type.</summary>
        </member>
        <member name="P:Au.Controls.KPanels.ParentInfo.Panel">
            <summary>
            Gets <b>DockPanel</b> that contains or will contain <see cref="P:Au.Controls.KPanels.ILeaf.Content"/>.
            The first child is caption, and is <b>TextBlock</b> or <b>Rectangle</b>. The second child is <b>Content</b> (if set) or none.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.ParentInfo.Grid">
            <summary>
            Gets parent <b>Grid</b> if in stack, else null.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.ParentInfo.TabControl">
            <summary>
            Gets parent <b>TabControl</b> if in tab, else null.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.ParentInfo.TabItem">
            <summary>
            Gets parent <b>TabItem</b> if in tab, else null.
            Its <b>Tag</b> is this <b>ILeaf</b>.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.ParentInfo.Index">
            <summary>
            Gets node index in parent node. If in tab, it is also tab item index.
            </summary>
        </member>
        <member name="M:Au.Controls.KPanels.Load(System.String,System.String)">
            <summary>
            Loads layout from XML file.
            </summary>
            <param name="xmlFileDefault">
            XML file containing default layout. See Default\Layout.xml in editor project.
            If starts with '&lt;', loads from XML string instead.
            </param>
            <param name="xmlFileCustomized">XML file containing user-modified layout. It will be created or updated by <see cref="M:Au.Controls.KPanels.Save"/>. If null, will not save.</param>
        </member>
        <member name="M:Au.Controls.KPanels.Save">
            <summary>
            Saves layout to XML file <i>xmlFileCustomized</i> specified when calling <see cref="M:Au.Controls.KPanels.Load(System.String,System.String)"/>.
            Can be called at any time. When closing window, should be called in OnClosing override after calling base.OnClosing.
            Does nothing if <i>xmlFileCustomized</i> was null.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.Container">
            <summary>
            Action that adds the root node (Grid) to a container (for example Window), like <c>_panels.Container = g => this.Content = g;</c>.
            The action is called immediately and also may be called later if need to create new root element when moving a panel etc.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.Item(System.String,System.Boolean)">
            <summary>
            Gets interface of a leaf item (panel, toolbar or document).
            </summary>
            <param name="name"></param>
            <param name="userDocument">It is a document (not panel/toolbar) added with <see cref="M:Au.Controls.KPanels.ILeaf.AddSibling(System.Boolean,Au.Controls.KPanels.LeafType,System.String,System.Boolean)"/>. User documents are in a separate dictionary, to avoid name conflicts.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="P:Au.Controls.KPanels.Item(System.Windows.DependencyObject)">
            <summary>
            Gets interface of container leaf item (panel, toolbar or document).
            </summary>
            <param name="e">Leaf's <b>Content</b> or any descendant.</param>
            <exception cref="T:Au.Types.NotFoundException"></exception>
        </member>
        <member name="P:Au.Controls.KPanels.CaptionBrush">
            <summary>
            Background brush of panel/document caption and tab strip. Default Brushes.LightSteelBlue.
            Set before <see cref="M:Au.Controls.KPanels.Load(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.SplitterBrush">
            <summary>
            Background brush of splitters.
            Set before <see cref="M:Au.Controls.KPanels.Load(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels.BorderBrush">
            <summary>
            Border color of panels and documents.
            Set before <see cref="M:Au.Controls.KPanels.Load(System.String,System.String)"/>.
            If not set, no borders will be added.
            </summary>
        </member>
        <member name="P:Au.Controls.KPanels._ContainerWindow">
            <summary>
            Gets top-level window, for example to use as owner of menus/dialogs.
            Note: it may not be direct container of the root element.
            </summary>
        </member>
        <member name="T:Au.Controls.KScintilla">
            <summary>
            This .NET control wraps native Scintilla control.
            It is not a universal Scintilla wrapper class. Just for this library and related software.
            </summary>
            <remarks>
            Most functions throw ArgumentOutOfRangeException when: 1. A position or line index argument is negative. 2. Scintilla returned a negative position or line index.
            If a position or line index argument is greater than text length or the number of lines, some functions return the text length or the last line, and it is documented; for other functions the behaviour is undefined, eg ArgumentOutOfRangeException or Scintilla's return value or like of the documented methods.
            
            Almost all function/event names start with z or Z, because VS intellisense cannot group by inheritance and would mix with 300 WPF functions/events. Most public and internal Scintilla API wrapper functions have prefix z, others Z. Derived classes can use prefix for example zz and ZZ.
            </remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.ZOnHandleCreated">
            <summary>
            Invokes event <see cref="E:Au.Controls.KScintilla.ZHandleCreated"/>.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.ZOnSciNotify(Au.Controls.Sci.SCNotification@)">
            <summary>
            Raises the <see cref="E:Au.Controls.KScintilla.ZNotify"/> event.
            </summary>
        </member>
        <member name="E:Au.Controls.KScintilla.ZNotify">
            <summary>
            Occurs when any Scintilla notification is received.
            </summary>
        </member>
        <member name="E:Au.Controls.KScintilla.ZTextChanged">
            <summary>
            Occurs when text changed.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.Call(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends a Scintilla message to the control and returns int.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.Call(System.Int32,System.IntPtr,System.Void*)">
            <summary>
            Sends a Scintilla message to the control and returns int.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.Call(System.Int32,System.IntPtr,System.Boolean)">
            <summary>
            Sends a Scintilla message to the control and returns int.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.Call(System.Int32,System.Boolean,System.IntPtr)">
            <summary>
            Sends a Scintilla message to the control and returns int.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.CallRetPtr(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends a Scintilla message to the control and returns nint.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZInitBorder">
            <summary>
            Border style.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZInitUseDefaultContextMenu">
            <summary>
            Use the default Scintilla's context menu.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZInitReadOnlyAlways">
            <summary>
            This control is used just to display text, not to edit.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZInitImages">
            <summary>
            Whether to show images specified in tags like &lt;image "image file path"&gt;, including icons of non-image file types.
            Must be set before creating control handle.
            If false, <see cref="P:Au.Controls.KScintilla.ZImages"/> property is null.
            </summary>
        </member>
        <member name="T:Au.Controls.KScintilla.ZTagsStyle">
            <summary>
            See <see cref="P:Au.Controls.KScintilla.ZInitTagsStyle"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.KScintilla.ZTagsStyle.NoTags">
            <summary>Don't support tags. The <see cref="P:Au.Controls.KScintilla.ZTags"/> property is null.</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.ZTagsStyle.AutoWithPrefix">
            <summary>Let <see cref="P:Au.Controls.KScintilla.zText"/>, zSetText and zAppendText parse tags when the text has prefix "&lt;&gt;".</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.ZTagsStyle.AutoAlways">
            <summary>Let <see cref="P:Au.Controls.KScintilla.zText"/>, zSetText and zAppendText parse tags always.</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.ZTagsStyle.User">
            <summary>Tags are parsed only when calling Tags.AddText.</summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZInitTagsStyle">
            <summary>
            Whether and when supports tags.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZInitWrapVisuals">
            <summary>
            Whether to show arrows etc to make wrapped lines more visible.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZWrapLines">
            <summary>
            Word-wrap.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZAcceptsEnter">
            <summary>
            Whether uses Enter key.
            If null (default), false if <see cref="P:Au.Controls.KScintilla.ZInitReadOnlyAlways"/> is true.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZDisableModifiedNotifications">
            <summary>
            On SCN_MODIFIED notifications suppress <see cref="M:Au.Controls.KScintilla.ZOnSciNotify(Au.Controls.Sci.SCNotification@)"/>, <see cref="E:Au.Controls.KScintilla.ZNotify"/> and <see cref="E:Au.Controls.KScintilla.ZTextChanged"/>.
            Use to temporarily disable 'modified' notifications. Never use SCI_SETMODEVENTMASK, because then the control would stop working correctly.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.ZNoMouseSetFocus">
            <summary>
            Don't set focus on mouse left/right/middle button down.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zStyleFont(System.Int32,System.Windows.Controls.Control)">
            <remarks>Uses only font name and size. Not style etc.</remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.zStyleMeasureStringWidth(System.Int32,System.String)">
            <summary>
            Measures string width.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zStyleClearAll">
            <summary>
            Calls SCI_STYLECLEARALL, which sets all styles to be the same as STYLE_DEFAULT.
            Then also sets some special styles, eg STYLE_HIDDEN and hotspot color.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zStyleClearRange(System.Int32,System.Int32)">
            <summary>
            Calls SCI_STYLECLEARALL(styleFrom, styleToNotIncluding), which sets range of styles to be the same as STYLE_DEFAULT.
            If styleToNotIncluding is 0, clears all starting from styleFrom.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zGetStyleAt(System.Int32)">
            <summary>
            Gets style at position.
            Uses SCI_GETSTYLEAT.
            Returns 0 if pos is invalid.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zGetMarginX(System.Int32)">
            <summary>
            SCI_GETMARGINWIDTHN. Not DPI-scaled.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zSetString(System.Int32,System.IntPtr,System.String,System.Boolean)">
            <summary>
            Calls a Scintilla message that sets a string which is passed using lParam.
            The string can be null if the Scintilla message allows it.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zSetString(System.Int32,System.String,System.IntPtr)">
            <summary>
            Calls a Scintilla message that sets a string which is passed using wParam.
            The string can be null if the Scintilla message allows it.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zSetStringString(System.Int32,System.String)">
            <summary>
            Calls a Scintilla message and passes two strings using wParam and lParam.
            wParam0lParam must be like "WPARAM\0LPARAM". Asserts if no '\0'.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zGetStringOfLength(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Calls a Scintilla message that gets a string when length is known.
            Always uses <i>utf8Length</i> bytes of the result (does not find length).
            Can get binary string (with '\0' characters).
            </summary>
            <param name="sciMessage"></param>
            <param name="wParam"></param>
            <param name="utf8Length">
            Known length (bytes) of the result UTF-8 string, without the terminating '\0' character.
            If 0, returns "" and does not call the message.
            </param>
        </member>
        <member name="M:Au.Controls.KScintilla.zGetStringGetLength(System.Int32,System.IntPtr)">
            <summary>
            Calls a Scintilla message that gets a string. See <see cref="M:Au.Controls.KScintilla.zGetStringOfLength(System.Int32,System.IntPtr,System.Int32)"/>.
            To get buffer size, at first calls <i>sciMessage</i> with <i>lParam</i>=0 (null buffer).
            Can get binary string (with '\0' characters).
            Don't call this function from another thread.
            </summary>
            <param name="sciMessage"></param>
            <param name="wParam"></param>
        </member>
        <member name="M:Au.Controls.KScintilla.zGetString0Terminated(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Calls a Scintilla message that gets a '\0'-terminated string.
            Cannot get binary string (with '\0' characters).
            Don't call this function from another thread.
            </summary>
            <param name="sciMessage"></param>
            <param name="wParam"></param>
            <param name="bufferSize">
            How much UTF-8 bytes to allocate for Scintilla to store the text.
            Can be either known or max expected text length, without the terminating '\0' character. The function will find length of the retrieved string (finds '\0').
            If 0, returns "" and does not call the message.
            </param>
        </member>
        <member name="M:Au.Controls.KScintilla._RangeText(System.Int32,System.Int32)">
            <summary>
            Optimized 'get text' function.
            </summary>
            <param name="start8">Start index, UTF-8.</param>
            <param name="end8">End index, UTF-8.</param>
            <remarks>
            Does not create an intermediate byte[].
            Gets big text 5 times faster than zGetStringOfLength. Tested with text 31K length, 1K lines.
            </remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.zNormalizeRange(System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            If <i>utf16</i>, converts <i>from</i> and <i>to</i> from characters to UTF-8 bytes.
            </summary>
            <param name="utf16">Input values are UTF-16.</param>
            <param name="from"></param>
            <param name="to">If -1, uses <see cref="P:Au.Controls.KScintilla.zLen8"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid argument, eg greater than text length or <i>to</i> less than <i>from</i>.</exception>
        </member>
        <member name="M:Au.Controls.KScintilla.zNormalizeRange(System.Boolean,System.Range)">
            <summary>
            If <i>utf16</i>, converts <i>from</i> and <i>to</i> from characters to UTF-8 bytes.
            </summary>
            <param name="utf16">Input values are UTF-16.</param>
            <param name="r">Range. Can be spacified from start or/and from end.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid argument, eg <i>to</i> less than <i>from</i>.</exception>
        </member>
        <member name="M:Au.Controls.KScintilla.zNormalizeRangeCanBeReverse(System.Boolean,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Same as <see cref="M:Au.Controls.KScintilla.zNormalizeRange(System.Boolean,System.Int32@,System.Int32@)"/>, but can be <i>to</i> less than <i>from</i>. If so, returns true.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid argument, eg greater than text length.</exception>
        </member>
        <member name="M:Au.Controls.KScintilla._ParamPos(System.Boolean,System.Int32)">
            <summary>
            => utf16 ? zPos8(pos) : pos;
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative.</exception>
        </member>
        <member name="M:Au.Controls.KScintilla._ReturnPos(System.Boolean,System.Int32)">
            <summary>
            => utf16 ? zPos16(pos) : pos;
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative.</exception>
        </member>
        <member name="M:Au.Controls.KScintilla._ReturnPosCanBeNegative(System.Boolean,System.Int32)">
            <summary>
            pos >= 0 ? (utf16 ? zPos16(pos) : pos) : pos;
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla._ParamLine(System.Int32)">
            <summary>
            => line;
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative.</exception>
        </member>
        <member name="M:Au.Controls.KScintilla.zClearText(Au.Controls.SciSetTextFlags)">
            <summary>
            Removes all text (SCI_CLEARALL).
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:Au.Controls.KScintilla.zSetText(System.String,Au.Controls.SciSetTextFlags,System.Boolean)">
            <summary>
            Replaces all text.
            Parses tags if need.
            </summary>
            <param name="s">Text.</param>
            <param name="flags"></param>
            <param name="ignoreTags">Don't parse tags, regardless of ZInitTagsStyle.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zSetText_(System.Byte[],System.Int32)">
            <summary>
            Sets UTF-8 text.
            </summary>
            <remarks>
            Does not parse tags etc, just calls SCI_SETTEXT and SCI_SETREADONLY if need.
            s must end with 0. Asserts.
            </remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.zSetText_(System.Byte*)">
            <summary>
            Sets UTF-8 text.
            Does not pare tags etc, just calls SCI_SETTEXT and SCI_SETREADONLY if need.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zAppendText(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Appends text and optionally "\r\n".
            Parses tags if need. Optionally scrolls and moves current position to the end (SCI_GOTOPOS).
            </summary>
            <param name="s"></param>
            <param name="andRN">Also append "\r\n". Ignored if parses tags; then appends.</param>
            <param name="scroll">Move current position and scroll to the end. Ignored if parses tags; then moves/scrolls.</param>
            <param name="ignoreTags">Don't parse tags, regardless of ZInitTagsStyle.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zAddText_(System.Boolean,System.Byte*,System.Int32)">
            <summary>
            Sets or appends UTF-8 text of specified length.
            Does not parse tags. Moves current position and scrolls to the end.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zGetText_">
            <summary>
            Gets all text directly from Scintilla.
            Does not use caching like zText.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zText">
            <summary>
            Gets or sets text.
            Uses caching, therefore the 'get' function is fast and garbage-free when calling multiple times.
            </summary>
            <remarks>
            The 'get' function gets cached text if called not the first time after setting or modifying control text.
            The 'set' function calls <see cref="M:Au.Controls.KScintilla.zSetText(System.String,Au.Controls.SciSetTextFlags,System.Boolean)"/> when need. Uses default parameters (with undo and notifications, unless ZInitReadOnlyAlways).
            Unlike the above methods, this property can be used before creating handle.
            </remarks>
        </member>
        <member name="P:Au.Controls.KScintilla.zLen8">
            <summary>
            UTF-8 text length.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zLen16">
            <summary>
            UTF-16 text length.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zPos8(System.Int32)">
            <summary>
            Converts UTF-16 position to UTF-8 position. Fast.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative or greater than <see cref="P:Au.Controls.KScintilla.zLen16"/>.</exception>
        </member>
        <member name="M:Au.Controls.KScintilla.zPos16(System.Int32)">
            <summary>
            Converts UTF-8 position to UTF-16 position. Fast.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative or greater than <see cref="P:Au.Controls.KScintilla.zLen8"/>.</exception>
        </member>
        <member name="P:Au.Controls.KScintilla.zCurrentPos8">
            <summary>
            Gets (SCI_GETCURRENTPOS) or sets (SCI_SETEMPTYSELECTION) current caret position in UTF-8 bytes.
            The 'set' function makes empty selection; does not scroll and does not make visible like zGoToPos.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zCurrentPos16">
            <summary>
            Gets (SCI_GETCURRENTPOS) or sets (SCI_SETEMPTYSELECTION) current caret position in UTF-16 chars.
            The 'set' function makes empty selection; does not scroll and does not make visible like zGoToPos.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zSelectionStart8">
            <summary>
            SCI_GETSELECTIONSTART UTF-8.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zSelectionStart16">
            <summary>
            SCI_GETSELECTIONSTART UTF-16.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zSelectionEnd8">
            <summary>
            SCI_GETSELECTIONEND UTF-8.
            Always greater or equal than SelectionStart.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zSelectionEnd16">
            <summary>
            SCI_GETSELECTIONEND UTF-16.
            Always greater or equal than SelectionStartChars.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zIsSelection">
            <summary>
            true if there is selected text.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineFromPos(System.Boolean,System.Int32)">
            <summary>
            Gets line index from character position.
            </summary>
            <param name="utf16"></param>
            <param name="pos">A position in document text. Returns the last line if too big.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineStart(System.Boolean,System.Int32)">
            <summary>
            Gets line start position from line index.
            </summary>
            <param name="utf16">Return UTF-16.</param>
            <param name="line">0-based line index. Returns text length if too big.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineEnd(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Gets line end position from line index.
            </summary>
            <param name="utf16">Return UTF-16.</param>
            <param name="line">0-based line index. Returns text length if too big.</param>
            <param name="withRN">Include \r\n.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineStartFromPos(System.Boolean,System.Int32)">
            <summary>
            Gets line start position from any position.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="pos">A position in document text. Returns text length if too big.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineStartFromPos(System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Gets line start position from any position and gets line index.
            Returns start position.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="pos">A position in document text. Returns text length if too big.</param>
            <param name="line">Receives line index.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineEndFromPos(System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets line end position from any position.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="pos">A position in document text. Returns text length if too big.</param>
            <param name="withRN">Include \r\n.</param>
            <param name="lineStartIsLineEnd">If pos is at a line start (0 or after '\n' character), return pos.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineStartEndFromPos(System.Boolean,System.Int32,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Gets line index, start and end positions from position.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="pos">A position in document text. Uses the last line if too big.</param>
            <param name="withRN">Include \r\n.</param>
            <param name="utf16Return">If not null, overrides <i>utf16</i> for return values.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineText(System.Int32,System.Boolean)">
            <summary>
            Gets line text.
            </summary>
            <param name="line">0-based line index. If invalid, returns "".</param>
            <param name="withRN">Include \r\n.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineHeight">
            <summary>
            Gets line height.
            Currently all lines are of the same height.
            </summary>
        </member>
        <member name="P:Au.Controls.KScintilla.zLineCount">
            <summary>
            Gets the number of lines.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineIndentationFromPos(System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Gets the number of tabs + spaces/4 at the start of the line that contains the specified position.
            </summary>
            <param name="utf16"></param>
            <param name="pos">A position in document text.</param>
            <param name="extraSpaces">Receives the number of extra spaces, 0 to 3.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zLineIndentationFromPos(System.Boolean,System.Int32)">
            <summary>
            Gets the number of tabs + spaces/4 at the start of the line that contains the specified position.
            </summary>
            <param name="utf16"></param>
            <param name="pos">A position in document text.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zPosFromXY(System.Boolean,Au.Types.POINT,System.Boolean)">
            <summary>
            Gets position from point.
            </summary>
            <param name="utf16">Return UTF-16.</param>
            <param name="p">Point in client area.</param>
            <param name="minusOneIfFar">Return -1 if p is not in text characters.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zAnnotationText(System.Int32)">
            <summary>
            Gets annotation text of line.
            Returns "" if the line does not contain annotation or is invalid line index.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zAnnotationText_(System.Int32)">
            <summary>
            Gets raw annotation text which can contain image info.
            zAnnotationText gets text without image info.
            Returns "" if the line does not contain annotation or is invalid line index.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zAnnotationText(System.Int32,System.String)">
            <summary>
            Sets annotation text of line.
            Does nothing if invalid line index.
            If s is null or "", removes annotation.
            Preserves existing image info.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zAnnotationText_(System.Int32,System.String)">
            <summary>
            Sets raw annotation text which can contain image info.
            If s is null or "", removes annotation.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zRangeToFullLines(System.Boolean,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Moves <i>from</i> to the start of its line, and <i>to</i> to the end of its line.
            Does not change <i>to</i> if it is at a line start.
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index.</param>
            <param name="withRN">Include "\r\n".</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zInsertText(System.Boolean,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            SCI_INSERTTEXT.
            </summary>
            <param name="utf16"></param>
            <param name="pos">Start index. Cannot be negative.</param>
            <param name="s">Text to insert. Can be null.</param>
            <param name="addUndoPointBefore">Call <see cref="M:Au.Controls.KScintilla.zAddUndoPoint"/> before.</param>
            <param name="addUndoPointAfter">Call <see cref="M:Au.Controls.KScintilla.zAddUndoPoint"/> after.</param>
            <param name="restoreFolding">If <i>pos</i> is hidden because of folding, finally collapse its folding again. See <see cref="T:Au.Controls.KScintilla.FoldingRestorer"/>.</param>
            <remarks>
            Does not parse tags.
            Does not change current selection, unless <i>pos</i> is in it; for it use <see cref="M:Au.Controls.KScintilla.zReplaceSel(System.String)"/> or <see cref="M:Au.Controls.KScintilla.zReplaceRange(System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:Au.Controls.KScintilla.FoldingRestorer">
            <summary>
            If ctor detects that the line from <i>pos</i> is hidden because of folding, <b>Dispose</b> collapses its folding again.
            Use when modifying text to prevent unfolding.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.FoldingRestorer.#ctor(Au.Controls.KScintilla,System.Int32)">
            <param name="sci">Can be null, then does nothing.</param>
            <param name="pos"></param>
        </member>
        <member name="M:Au.Controls.KScintilla.zDeleteRange(System.Boolean,System.Int32,System.Int32)">
            <summary>
            SCI_DELETERANGE.
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index. If -1, uses control text length.</param>
            <remarks>
            Does not parse tags.
            Does not change current selection, unless it is in the range (including <i>to</i>); for it use <see cref="M:Au.Controls.KScintilla.zReplaceSel(System.String)"/> or <see cref="M:Au.Controls.KScintilla.zReplaceRange(System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.zReplaceRange(System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Replaces text range.
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index. If -1, uses control text length. Can be less than <i>from</i>.</param>
            <param name="s">Replacement text. Can be null.</param>
            <param name="moveCurrentPos">
            After replacing set curent position at the end of the replacement. If <i>from</i> less than to - at <i>from</i>.
            Else if current position was in the range (including <i>to</i>), Scintilla sets at <i>from</i>.
            Else does not change current position and selection.
            </param>
            <remarks>
            Does not parse tags.
            By default does not change current selection, unless it is in the range (including <i>to</i>).
            </remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.zRangeText(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets range text.
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index. If -1, uses control text length.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zRangePointer(System.Int32,System.Int32)">
            <summary>
            Gets direct pointer to a text range in Scintilla buffer (SCI_GETRANGEPOINTER).
            Does not validate arguments, just asserts to >= from.
            </summary>
            <param name="from">UTF-8 start position.</param>
            <param name="to">UTF-8 end position.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zReplaceSel(System.String)">
            <summary>
            SCI_REPLACESEL.
            </summary>
            <param name="s">Replacement text. Can be null.</param>
            <remarks>
            Does not parse tags.
            If read-only, asserts and fails (unlike most other functions that change text).
            </remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.zReplaceSel(System.Boolean,System.Int32,System.String)">
            <summary>
            zGoToPos and SCI_REPLACESEL.
            </summary>
            <param name="utf16"></param>
            <param name="s">Replacement text. Can be null.</param>
            <param name="pos">Start index.</param>
            <remarks>
            Does not parse tags.
            If read-only, asserts and fails (unlike most other functions that change text).
            </remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.zSetAndReplaceSel(System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Sets selection (SCI_SETSEL) and replaces with new text (SCI_REPLACESEL).
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index. If -1, uses control text length. Can be less than from.</param>
            <param name="s">Replacement text. Can be null.</param>
            <remarks>
            Does not parse tags.
            If read-only, asserts and fails (unlike most other functions that change text).
            </remarks>
        </member>
        <member name="M:Au.Controls.KScintilla.zGoToPos(System.Boolean,System.Int32)">
            <summary>
            SCI_GOTOPOS and ensures visible.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zGoToLine(System.Int32)">
            <summary>
            SCI_GOTOLINE and ensures visible.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zSelect(System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            SCI_SETSEL and optionally ensures visible.
            </summary>
            <param name="utf16"></param>
            <param name="from"></param>
            <param name="to">If -1, uses text length. Else <i>to</i> can be less than <i>from</i>. Caret will be at <i>to</i>.</param>
            <param name="makeVisible">Ensure line visible and selection visible. Without it in some cases selection to the left of the caret may be invisible.</param>
        </member>
        <member name="P:Au.Controls.KScintilla.zIsReadonly">
            <summary>
            SCI_GETREADONLY, SCI_SETREADONLY.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.FileLoaderSaver.Load(System.String)">
            <summary>
            Loads file as UTF-8.
            Returns byte[] that must be passed to <see cref="M:Au.Controls.KScintilla.FileLoaderSaver.SetText(Au.Controls.KScintilla,System.Byte[])"/>.
            </summary>
            <param name="file">To pass to File.OpenRead.</param>
            <exception cref="T:System.Exception">Exceptions of File.OpenRead, File.Read, Encoding.Convert.</exception>
            <remarks>
            Supports any encoding (UTF-8, UTF-16, etc), BOM. Remembers it for Save.
            If UTF-8 with BOM, the returned array contains BOM (to avoid copying), and <b>SetText</b> knows it.
            If file data is binary or file size is more than 100_000_000, the returned text shows error message or image. Then <b>SetText</b> makes the control read-only; <b>Save</b> throws exception.
            </remarks>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Binary">
            <summary>Not a text file, or loading failed, or not initialized.</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Utf8NoBOM">
            <summary>ASCII or UTF-8 without BOM.</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Utf8BOM">
            <summary>UTF-8 with BOM (3 bytes).</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Ansi">
            <summary>ANSI containing non-ASCII characters, unknown code page.</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Utf16NoBOM">
            <summary>UTF-16 without BOM.</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Utf16BOM">
            <summary>UTF-16 with BOM (2 bytes).</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Utf16BE">
            <summary>UTF-16 with big endian BOM (2 bytes).</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Utf32BOM">
            <summary>UTF-32 with BOM (4 bytes).</summary>
        </member>
        <member name="F:Au.Controls.KScintilla.FileLoaderSaver._Encoding.Utf32BE">
            <summary>UTF-32 with big endian BOM (4 bytes).</summary>
        </member>
        <member name="M:Au.Controls.KScintilla.FileLoaderSaver.SetText(Au.Controls.KScintilla,System.Byte[])">
            <summary>
            Sets control text.
            If the file is binary or too big, shows error message or image, makes the control read-only, and returns false. Else returns true.
            Uses <see cref="T:Au.Controls.SciSetTextFlags"/> NoUndo and NoNotify.
            </summary>
            <param name="z"></param>
            <param name="text">Returned by <b>Load</b>.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.FileLoaderSaver.Save(Au.Controls.KScintilla,System.String,System.String)">
            <summary>
            Saves control text with the same encoding/BOM as loaded. Uses <see cref="M:Au.filesystem.save(System.String,System.Action{System.String},System.Boolean,System.String,System.Int32)"/>.
            </summary>
            <param name="z"></param>
            <param name="file">To pass to filesystem.save.</param>
            <param name="tempDirectory">To pass to filesystem.save.</param>
            <exception cref="T:System.Exception">Exceptions of filesystem.save.</exception>
            <exception cref="T:System.InvalidOperationException">The file is binary (then <b>SetText</b> made the control read-only), or <b>Load</b> not called.</exception>
        </member>
        <member name="M:Au.Controls.KScintilla.zGetSelectionLines(System.Boolean,System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.String}@,System.Boolean,System.Boolean)">
            <summary>
            Gets text and offsets of lines containing selection.
            Returns true. If <i>ifFullLines</i> is true, may return false.
            </summary>
            <param name="utf16">Return UTF-16.</param>
            <param name="x">Results.</param>
            <param name="ifFullLines">Fail (return false) if selection length is 0 or selection start is not at a line start.</param>
            <param name="oneMore">Get +1 line if selection ends at a line start, except if selection length is 0.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zFindText(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            SCI_FINDTEXT.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="s"></param>
            <param name="start"></param>
            <param name="end">If -1, text length.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.zAddUndoPoint">
            <summary>
            SCI_BEGINUNDOACTION, SCI_ENDUNDOACTION.
            </summary>
        </member>
        <member name="T:Au.Controls.KScintilla.UndoAction">
            <summary>
            Ctor calls SCI_BEGINUNDOACTION. Dispose() calls SCI_ENDUNDOACTION.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.UndoAction.#ctor(Au.Controls.KScintilla)">
            <summary>
            Calls SCI_BEGINUNDOACTION.
            </summary>
            <param name="sci">Can be null, then does nothing.</param>
        </member>
        <member name="M:Au.Controls.KScintilla.UndoAction.Dispose">
            <summary>
            Calls SCI_ENDUNDOACTION and clears this variable.
            </summary>
        </member>
        <member name="M:Au.Controls.KScintilla.zSetStyled">
            <summary>
            Sets scintilla's "end-styled position" = int.MaxValue, to avoid SCN_STYLENEEDED notifications.
            Fast, just sets a field in scintilla.
            </summary>
            <remarks>
            Scintilla sends SCN_STYLENEEDED even if lexer type is SCLEX_NULL. In some cases 1 or several, in some cases many, in some cases every 500 ms.
            Old documentation and behavior: sends notifications when SCLEX_CONTAINER. No styling and notifications if SCLEX_NULL.
            New documentation does not mention SCLEX_CONTAINER, SCLEX_NULL and even SCI_SETLEXER (replaced by SCI_SETILEXER?). But they are defined and used in scintilla.
            </remarks>
        </member>
        <member name="T:Au.Controls.KSciCodeBox">
            <summary>
            Scintilla-based control that shows colored C# code.
            Also can be used anywhere to edit partially styled C# code. To make editable and set text use <see cref="M:Au.Controls.KSciCodeBox.ZSetText(System.String,System.Int32)"/> with readonlyFrom=-1.
            </summary>
        </member>
        <member name="M:Au.Controls.KSciCodeBox.ZSetText(System.String,System.Int32)">
            <summary>
            Sets text and makes all or part of it readonly.
            </summary>
            <param name="s"></param>
            <param name="readonlyFrom">If 0, makes all text readonly. If s.Length or -1, makes all text editable. If between 0 and s.Length, makes readonly from this position.</param>
        </member>
        <member name="T:Au.Controls.KSciInfoBox">
            <summary>
            Scintilla-based control to show formatted information text.
            To set text use the <see cref="P:Au.Controls.KScintilla.zText"/> property. For formatting and links use tags: <see cref="T:Au.Controls.SciTags"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KSciInfoBox.ZInitUseControlFont">
            <summary>
            Use font of <i>value</i> instead of the default font Verdana 8.
            </summary>
        </member>
        <member name="P:Au.Controls.KSciInfoBox.ZInitBlankMargins">
            <summary>
            The width of the blank margin on both sides of the text. Logical pixels.
            </summary>
        </member>
        <member name="M:Au.Controls.KSciInfoBox.AddElem(System.Windows.FrameworkElement,System.String)">
            <summary>
            Sets element's tooltip text to show in this control instead of standard tooltip popup.
            Uses <b>ToolTip</b> property; don't overwrite it.
            </summary>
        </member>
        <member name="M:Au.Controls.Sci.Sci_GetVisibleRange(System.IntPtr,Au.Controls.Sci.Sci_VisibleRange@)">
            <summary>
            flags: 1 need pos
            </summary>
        </member>
        <member name="P:Au.Controls.Sci.SCNotification.Text">
            <summary>
            Converts textUTF8 to C# string.
            Returns null if textUTF8 is null.
            Don't call this property multiple times for the same notification. Store the return value in a variable and use it.
            </summary>
        </member>
        <member name="P:Au.Controls.Sci.SCNotification.FinalPosition">
            <summary>
            Returns position, UTF-8. If SCN_MODIFIED(SC_MOD_INSERTTEXT|SC_MOD_BEFOREINSERT|SC_MOD_INSERTCHECK), adds length, because position then is old position.
            </summary>
        </member>
        <member name="T:Au.Controls.SciSetTextFlags">
            <summary>
            Flags for 'set text', 'clear text' and similar functions. Eg you can disable Undo collection or 'changed' notifications.
            Note: Ignores NoUndo and NoNotify if ZInitReadOnlyAlways, because then Undo and notifications are disabled when creating control.
            </summary>
        </member>
        <member name="F:Au.Controls.SciSetTextFlags.NoUndo">
            <summary>
            Cannot be undone. Clear Undo buffer.
            </summary>
        </member>
        <member name="F:Au.Controls.SciSetTextFlags.NoNotify">
            <summary>
            Don't send 'modified' and 'text changed' notifications (don't call overrides and events).
            </summary>
        </member>
        <member name="F:Au.Controls.SciSetTextFlags.NoUndoNoNotify">
            <summary>
            NoUndo | NoNotify.
            </summary>
        </member>
        <member name="T:Au.Controls.SciImages">
            <summary>
            Gets image file paths etc from <see cref="T:Au.Controls.KScintilla"/> control text and displays the images below that lines.
            </summary>
            <remarks>
            Draws images in annotation areas.
            Supports text annotations too, below images and in no-image lines. But it is limited:
            1. To set/get it use <see cref="M:Au.Controls.KScintilla.zAnnotationText(System.Int32,System.String)"/>, not direct Scintilla API.
            2. You cannot hide all annotations (SCI_ANNOTATIONSETVISIBLE). This class sets it to show always.
            3. You cannot clear all annotations (SCI_ANNOTATIONCLEARALL).
            4. Setting annotation styles is currently not supported.
            </remarks>
        </member>
        <member name="M:Au.Controls.SciImages._ThreadSharedData.CompactCache">
            <summary>
            If cache is large (at least MaxCacheSize and 4 images), removes about 3/4 of older cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages.#ctor(Au.Controls.KScintilla)">
            <summary>
            Prepares this variable and the Scintilla control to display images.
            Calls SCI_ANNOTATIONSETVISIBLE(ANNOTATION_STANDARD). Need it because will draw images in annotation areas.
            </summary>
            <param name="c">The control.</param>
        </member>
        <member name="M:Au.Controls.SciImages.ClearCache">
            <summary>
            Removes all cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages.CompactCache">
            <summary>
            If cache is large (at least MaxCacheSize and 4 images), removes about 3/4 of older cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="P:Au.Controls.SciImages.MaxCacheSize">
            <summary>
            Maximal size of the image cache.
            Default 4 MB.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages._SetImagesForTextRange(System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets image annotations for one or more lines of text.
            </summary>
            <param name="firstLine">First line index.</param>
            <param name="text">Text that starts at line firstLine.</param>
            <param name="length">Text length.</param>
            <param name="allText">Added all text (not edited or appended).</param>
            <param name="textPos">Position where the text starts.</param>
        </member>
        <member name="M:Au.Controls.SciImages._ParseAnnotText(System.Byte*,System.Int32,System.Int32@)">
            <summary>
            Parses annotation text.
            If it starts with image info string ("\x3NNN\n\n..."), returns its length. Else returns 0.
            </summary>
            <param name="s">Annotation text. Can start with image info string or not.</param>
            <param name="length">s length.</param>
            <param name="imageInfo">The NNN part of image info, or 0.</param>
        </member>
        <member name="M:Au.Controls.SciImages.AnnotationText_(System.Int32,System.String)">
            <summary>
            Sets annotation text, preserving existing image info.
            </summary>
            <param name="line"></param>
            <param name="s">New text without image info.</param>
        </member>
        <member name="M:Au.Controls.SciImages.AnnotationText_(System.Int32)">
            <summary>
            Gets annotation text without image info.
            </summary>
        </member>
        <member name="P:Au.Controls.SciImages.Visible">
            <summary>
            Hides/shows all images, or changes the display style of annotation areas.
            Default is ANNOTATION_STANDARD (images visible).
            When hiding, it just removes images, does not hide text annotations (SCI_ANNOTATIONGETVISIBLE remains unchanged).
            </summary>
        </member>
        <member name="T:Au.Controls.SciTags">
            <summary>
            Adds links and text formatting to an <see cref="T:Au.Controls.KScintilla"/> control.
            </summary>
            <remarks>
            Links and formatting is specified in text, using tags like in HTML. Depending on control style, may need prefix <c><![CDATA[<>]]></c>.
            Reference: [](xref:output_tags).
            Tags are supported by <see cref="M:Au.print.it(System.String)"/> when it writes to the Au script editor.
            
            This control does not implement some predefined tags: open, script.
            If used, must be implemented by the program.
            Also you can register custom link tags that call your callback functions.
            See <see cref="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})"/>, <see cref="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})"/>.
            
            Tags are supported by some existing controls based on <see cref="T:Au.Controls.KScintilla"/>. In the Au editor it is the output (use <see cref="M:Au.print.it(System.String)"/>, like in the example below). In this library - the <see cref="T:Au.Controls.KSciInfoBox"/> control. To enable tags in other <see cref="T:Au.Controls.KScintilla"/> controls, use <see cref="P:Au.Controls.KScintilla.ZInitTagsStyle"/> and optionally <see cref="P:Au.Controls.KScintilla.ZInitImages"/>.
            </remarks>
            <example>
            <code><![CDATA[
            print.it("<>Text with <i>tags<>.");
            ]]></code>
            </example>
        </member>
        <member name="T:Au.Controls.SciTags.UserDefinedStyle">
            <summary>
            For <see cref="M:Au.Controls.SciTags.AddStyleTag(System.String,Au.Controls.SciTags.UserDefinedStyle)"/>.
            </summary>
        </member>
        <member name="M:Au.Controls.SciTags._ClearUserStyles">
            <summary>
            Clears user-defined (through tags) styles.
            Max number of user styles is NUM_STYLES_EX (216). Need to clear old styles before new styles can be defined.
            This func is usually called after clearing control text.
            </summary>
        </member>
        <member name="M:Au.Controls.SciTags.PrintServerProcessMessages(Au.print.Server,System.Action{Au.Types.PrintServerMessage})">
            <summary>
            Displays <see cref="T:Au.print.Server"/> messages that are currently in its queue.
            </summary>
            <param name="ps">The print.Server instance.</param>
            <param name="onMessage">
            A callback function that can be called when this function gets/removes a message from ps.
            When message type is Write, it can change message text; if null, this function ignores the message.
            It also processes messages of type TaskEvent; this function ignores them.
            </param>
            <remarks>
            Removes messages from the queue.
            Appends text messages + "\r\n" to the control's text, or clears etc (depends on message).
            Messages with tags must have prefix "&lt;&gt;".
            Limits text length to about 4 MB (removes oldest text when exceeded).
            </remarks>
            <seealso cref="M:Au.print.Server.SetNotifications(Au.wnd,System.Int32)"/>
        </member>
        <member name="M:Au.Controls.SciTags.AddText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets or appends styled text.
            </summary>
            <param name="text">Text with tags (optionally).</param>
            <param name="appendLine">Append. Also appends "\r\n". Sets caret and scrolls to the end. If false, replaces control text.</param>
            <param name="skipLTGT">If text starts with "&lt;&gt;", skip it.</param>
        </member>
        <member name="M:Au.Controls.SciTags.OnLinkClick_(System.Int32,System.Boolean)">
            <summary>
            Called on SCN_HOTSPOTRELEASECLICK.
            </summary>
        </member>
        <member name="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})">
            <summary>
            Adds (registers) a user-defined link tag for this control.
            </summary>
            <param name="name">
            Tag name, like "+myTag".
            Must start with '+'. Other characters must be 'a'-'z', 'A'-'Z'. Case-sensitive.
            Or can be one of predefined link tags, if you want to override or implement it (some are not implemented by the control).
            If already exists, replaces the delegate.
            </param>
            <param name="a">
            A delegate of a callback function (probably you'll use a lambda) that is called on link click.
            It's string parameter contains tag's attribute (if "&lt;name "attribute"&gt;TEXT&lt;&gt;) or link text (if "&lt;name&gt;TEXT&lt;&gt;).
            The function is called in control's thread. The mouse button is already released. It is safe to do anything with the control, eg replace text.
            </param>
            <remarks>
            Call this function when control handle is already created. Until that <see cref="P:Au.Controls.KScintilla.ZTags"/> returns null.
            </remarks>
            <seealso cref="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})"/>
        </member>
        <member name="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})">
            <summary>
            Adds (registers) a user-defined link tag for all controls.
            </summary>
            <param name="name">
            Tag name, like "+myTag".
            Must start with '+'. Other characters must be 'a'-'z', 'A'-'Z'. Case-sensitive.
            Or can be one of predefined link tags, if you want to override or implement it (some are not implemented by the control).
            If already exists, replaces the delegate.
            </param>
            <param name="a">
            A delegate of a callback function (probably you'll use a lambda) that is called on link click.
            It's string parameter contains tag's attribute (if "&lt;name "attribute"&gt;TEXT&lt;&gt;) or link text (if "&lt;name&gt;TEXT&lt;&gt;).
            The function is called in control's thread. The mouse button is already released. It is safe to do anything with the control, eg replace text.
            </param>
            <seealso cref="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})"/>
        </member>
        <member name="M:Au.Controls.SciTags.AddStyleTag(System.String,Au.Controls.SciTags.UserDefinedStyle)">
            <summary>
            Adds (registers) a user-defined style tag for this control.
            </summary>
            <param name="name">
            Tag name, like ".my".
            Must start with '.'. Other characters must be 'a'-'z', 'A'-'Z'. Case-sensitive.
            </param>
            <param name="style"></param>
            <exception cref="T:System.ArgumentException">name does not start with '.'.</exception>
            <exception cref="T:System.InvalidOperationException">Trying to add more than 100 styles.</exception>
            <remarks>
            Call this function when control handle is already created. Until that <see cref="P:Au.Controls.KScintilla.ZTags"/> returns null.
            </remarks>
        </member>
        <member name="M:Au.Controls.KTreeView.#ctor">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
            
        </member>
        <member name="P:Au.Controls.KTreeView.Dpi">
            
        </member>
        <member name="M:Au.Controls.KTreeView.SetItems(System.Collections.Generic.IEnumerable{Au.Controls.ITreeViewItem},System.Boolean)">
            <summary>
            Sets (adds, replaces or removes) all items.
            </summary>
            <param name="items">Items at tree root. Can be null.</param>
            <param name="modified">true when adding/removing one or more items in same tree/list. Preserves selection, scroll position, etc.</param>
        </member>
        <member name="P:Au.Controls.KTreeView.CountVisible">
            <summary>
            Gets the number of visible items.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.IndexOf(Au.Controls.ITreeViewItem)">
            <summary>
            Gets item index in visible items.
            Returns -1 if not found.
            </summary>
            <param name="item">Can be null.</param>
        </member>
        <member name="P:Au.Controls.KTreeView.Item(System.Int32)">
            <summary>
            Gets visible item at index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:System.NullReferenceException">Items not added.</exception>
        </member>
        <member name="M:Au.Controls.KTreeView.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            
        </member>
        <member name="P:Au.Controls.KTreeView.TopIndex">
            <summary>
            Gets or sets index of the first item in the scroll view; it is the value of the vertical scrollbar.
            The 'set' function scrolls if need. Clamps if invalid index.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.Expand(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Expands or collapses folder.
            </summary>
            <param name="index"></param>
            <param name="expand">If null, toggles.</param>
            <exception cref="T:System.InvalidOperationException">Not folder. Or control not created.</exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Au.Controls.KTreeView.Expand(Au.Controls.ITreeViewItem,System.Nullable{System.Boolean})">
            <summary>
            Expands or collapses folder.
            </summary>
            <param name="item"></param>
            <param name="expand">If null, toggles.</param>
            <exception cref="T:System.InvalidOperationException">Not folder. Or control not created.</exception>
            <exception cref="T:System.ArgumentException"><i>item</i> is not a visible item in this control. No exception if <i>expand</i> == false.</exception>
        </member>
        <member name="M:Au.Controls.KTreeView.EnsureVisible(System.Int32)">
            <summary>
            Scrolls if need to make item actually visible.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Au.Controls.KTreeView.EnsureVisible(Au.Controls.ITreeViewItem)">
            <summary>
            Expands descendant folders and scrolls if need to make item actually visible.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            
        </member>
        <member name="P:Au.Controls.KTreeView.SingleClickActivate">
            <summary>
            Whether to activate an item on single click instead of double click.
            </summary>
            <seealso cref="E:Au.Controls.KTreeView.ItemActivated"/>
        </member>
        <member name="P:Au.Controls.KTreeView.HotTrack">
            <summary>
            Whether to higlight an item when mouse is over.
            </summary>
            <seealso cref="E:Au.Controls.KTreeView.ItemActivated"/>
        </member>
        <member name="P:Au.Controls.KTreeView.ShowLabelTip">
            <summary>
            Whether to show a tooltip with full item text when mouse is over an item with partially visible text. Default true.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.ProcessKey(System.Windows.Input.Key)">
            <summary>
            Processes keys such as arrow, page, Enter, Ctrl+A.
            Returns true if handled.
            </summary>
            <seealso cref="M:Au.keys.more.KKeyToWpf(Au.Types.KKey)"/>
        </member>
        <member name="E:Au.Controls.KTreeView.ItemActivated">
            <summary>
            When an item double-clicked. Or clicked, if <see cref="P:Au.Controls.KTreeView.SingleClickActivate"/>. Also on Enter key if focused.
            </summary>
        </member>
        <member name="E:Au.Controls.KTreeView.ItemClick">
            <summary>
            When an item clicked or double-clicked with the left, right or middle mouse button.
            </summary>
        </member>
        <member name="E:Au.Controls.KTreeView.ItemDragStart">
            <summary>
            When drag start detected.
            </summary>
        </member>
        <member name="P:Au.Controls.KTreeView.MultiSelect">
            <summary>
            Whether can select multiple items, for example with Ctrl or Shift key.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.Select(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selects or unselects item.
            </summary>
            <param name="index"></param>
            <param name="select">true to select, false to unselect.</param>
            <param name="unselectOther">Unselect other items. Used only if <see cref="P:Au.Controls.KTreeView.MultiSelect"/> true, else always unselects other items.</param>
            <param name="focus">Set <see cref="P:Au.Controls.KTreeView.FocusedIndex"/>=<i>index</i>.</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Au.Controls.KTreeView.Select(Au.Controls.ITreeViewItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selects or unselects item.
            </summary>
            <param name="item"></param>
            <param name="select">true to select, false to unselect.</param>
            <param name="unselectOther">Unselect other items. Used only if <see cref="P:Au.Controls.KTreeView.MultiSelect"/> true, else always unselects other items.</param>
            <param name="focus">Set <see cref="P:Au.Controls.KTreeView.FocusedIndex"/>=<i>index</i>.</param>
            <exception cref="T:System.ArgumentException"><i>item</i> is not a visible item in this control. No exception if <i>select</i> false.</exception>
        </member>
        <member name="M:Au.Controls.KTreeView.Select(System.Range,System.Boolean,System.Boolean)">
            <summary>
            Selects or unselects range of items.
            </summary>
            <param name="range">Range of item indices. For example <c>..</c> means all.</param>
            <param name="select">true to select, false to unselect.</param>
            <param name="unselectOther">Unselect other items. Used only if <see cref="P:Au.Controls.KTreeView.MultiSelect"/> true, else always unselects other items.</param>
        </member>
        <member name="M:Au.Controls.KTreeView.UnselectAll">
            <summary>
            Unselects all.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.SelectSingle(System.Int32,System.Boolean)">
            <summary>
            Selects item, unselects others, optionally makes the focused.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.SelectSingle(Au.Controls.ITreeViewItem,System.Boolean)">
            <summary>
            Selects item, unselects others, optionally makes the focused.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.IsSelected(System.Int32)">
            <summary>
            Returns true if the item is selected.
            </summary>
            <seealso cref="P:Au.Controls.KTreeView.MultiSelect"/>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Au.Controls.KTreeView.IsSelected(Au.Controls.ITreeViewItem)">
            <summary>
            Returns true if the item is visible and selected.
            </summary>
            <seealso cref="P:Au.Controls.KTreeView.MultiSelect"/>
        </member>
        <member name="P:Au.Controls.KTreeView.SelectedIndices">
            <summary>
            Gets selected items. Returns empty list if none selected.
            </summary>
            <seealso cref="P:Au.Controls.KTreeView.MultiSelect"/>
        </member>
        <member name="P:Au.Controls.KTreeView.SelectedItems">
            <summary>
            Gets selected items. Returns empty list if none selected.
            </summary>
            <seealso cref="P:Au.Controls.KTreeView.MultiSelect"/>
        </member>
        <member name="P:Au.Controls.KTreeView.SelectedIndex">
            <summary>
            Returns index of first selected item, or -1 if no selection.
            </summary>
        </member>
        <member name="P:Au.Controls.KTreeView.SelectedItem">
            <summary>
            Returns first selected item, or null if no selection.
            </summary>
        </member>
        <member name="P:Au.Controls.KTreeView.FocusedIndex">
            <summary>
            Gets or sets index of item that has logical focus within the control. Can be -1.
            Used with keyboard actions (Enter-activate, arrows, page down/up) and range selection (Shift+click when <see cref="P:Au.Controls.KTreeView.MultiSelect"/> true).
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <remarks>
            The 'set' function calls <see cref="M:Au.Controls.KTreeView.EnsureVisible(System.Int32)"/>.
            </remarks>
        </member>
        <member name="P:Au.Controls.KTreeView.FocusedItem">
            <summary>
            Gets or sets item that has logical focus within the control. Can be null.
            Used with keyboard actions (Enter-activate, arrows, page down/up) and range selection (Shift+click when <see cref="P:Au.Controls.KTreeView.MultiSelect"/> true).
            </summary>
            <exception cref="T:System.ArgumentException">Setter throws if the item is not a visible item in this control.</exception>
        </member>
        <member name="M:Au.Controls.KTreeView.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            
        </member>
        <member name="P:Au.Controls.KTreeView.HasCheckboxes">
            <summary>
            Has checkboxes.
            </summary>
            <remarks>
            To get checkbox states the control calls <see cref="P:Au.Controls.ITreeViewItem.CheckState"/>.
            The control does not automatically set checkbox states. You can do it in <see cref="E:Au.Controls.KTreeView.ItemClick"/> event handler like in the example.
            </remarks>
            <example>
            Event handler.
            <code><![CDATA[
            _tv.ItemClick+=(_,e)=>{
            	var v=e.Item as TvItem; //TvItem is your class that implements ITreeViewItem interface
            	if(e.ClickedPart==KTreeView.TVParts.Checkbox && !v.IsDisabled) v.CheckState=v.CheckState==default ? KTreeView.TVCheck.Checked : default;
            };
            ]]></code>
            Property of your TvItem class that implements ITreeViewItem interface.
            <code><![CDATA[
            public KTreeView.TVCheck CheckState {
            	get => _checkState;
            	set { if(value!=_checkState) { _checkState=value; _tv.Redraw(this); } }
            }
            KTreeView.TVCheck _checkState;
            ]]></code>
            </example>
        </member>
        <member name="P:Au.Controls.KTreeView.CheckedIndices">
            <summary>
            Gets checked items (<see cref="F:Au.Controls.TVCheck.Checked"/>). Returns empty list if none checked.
            </summary>
        </member>
        <member name="P:Au.Controls.KTreeView.CheckedItems">
            <summary>
            Gets checked items (<see cref="F:Au.Controls.TVCheck.Checked"/>). Returns empty list if none checked.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.EditLabel(System.Action{System.Boolean})">
            <summary>
            Starts focused item text editing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Control not created.</exception>
        </member>
        <member name="M:Au.Controls.KTreeView.EditLabel(Au.Controls.ITreeViewItem,System.Action{System.Boolean})">
            <summary>
            Starts item text editing.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException">Control not created.</exception>
        </member>
        <member name="M:Au.Controls.KTreeView.EditLabel(System.Int32,System.Action{System.Boolean})">
            <summary>
            Starts item text editing.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:System.InvalidOperationException">Control not created.</exception>
        </member>
        <member name="M:Au.Controls.KTreeView.EndEditLabel(System.Boolean)">
            <summary>
            Ends item text editing.
            </summary>
        </member>
        <member name="M:Au.Controls.KTreeView.OnDragLeave(System.Windows.DragEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnDrop(System.Windows.DragEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KTreeView.OnDragOver2(System.Boolean)">
            <summary>
            Can be called from "drag over" override or event handler to show/hide insertion mark, expand/collapse folder and scroll if need.
            </summary>
            <param name="canDrop">Can drop here. If false, hides insertion mark and returns.</param>
            <remarks>
            Draws black line between nearest items. If mouse is on a folder vertical center, draws rectangle.
            When mouse is on a folder, expands it if pressed key Right and collapses if Left.
            Scrolls when mouse is near top or bottom or pressed key Down, Up, PageDown, PageUp, Home or End.
            </remarks>
            <seealso cref="M:Au.Controls.KTreeView.GetDropInfo(Au.Controls.TVDropInfo@)"/>
        </member>
        <member name="M:Au.Controls.KTreeView.GetDropInfo(Au.Controls.TVDropInfo@)">
            <summary>
            Can be called from "drag over" and "drop" overrides or event handlers to get drop info.
            This overload uses mouse position (<see cref="P:Au.wnd.MouseClientXY"/>).
            </summary>
            <param name="d"></param>
            <seealso cref="M:Au.Controls.KTreeView.OnDragOver2(System.Boolean)"/>
        </member>
        <member name="M:Au.Controls.KTreeView.GetDropInfo(Au.Types.POINT,Au.Controls.TVDropInfo@)">
            <summary>
            Can be called from "drag over" and "drop" overrides or event handlers to get drop info.
            </summary>
            <param name="xy">A point relative to the top-left of the control without border. Physical pixels.</param>
            <param name="d"></param>
            <seealso cref="M:Au.Controls.KTreeView.OnDragOver2(System.Boolean)"/>
        </member>
        <member name="M:Au.Controls.KTreeView._ItemFromY(System.Int32)">
            <summary>
            Returns item index, or -1 if not on item.
            </summary>
            <param name="y">In control coord, physical.</param>
        </member>
        <member name="M:Au.Controls.KTreeView.GetRectPhysical(System.Int32,Au.Controls.TVParts,System.Boolean,System.Boolean)">
            <summary>
            Gets item rectangle in physical pixel units.
            Horizontally the rectangle is limited to the visible area.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:System.InvalidOperationException">Control not created.</exception>
        </member>
        <member name="M:Au.Controls.KTreeView.GetRectLogical(System.Int32,Au.Controls.TVParts,System.Boolean,System.Boolean)">
            <summary>
            Gets item rectangle in WPF logical pixel units.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Au.Controls.KTreeView.HitTest(Au.Types.POINT,Au.Controls.TVHitTest@)">
            <summary>
            Gets item from point, and its part.
            Returns false if not on an item.
            </summary>
            <param name="p">Point in control coordinates. Physical pixels.</param>
            <param name="h">Results.</param>
        </member>
        <member name="M:Au.Controls.KTreeView.HitTest(Au.Controls.TVHitTest@)">
            <summary>
            Gets item from mouse, and its part.
            Returns false if not on an item.
            </summary>
            <param name="h">Results.</param>
        </member>
        <member name="M:Au.Controls.KTreeView.Redraw(System.Int32,System.Boolean)">
            <summary>
            Asynchronously redraws item.
            Does nothing if the control is not created.
            </summary>
            <param name="index"></param>
            <param name="remeasure">Remeasure item width. My need this when changed text or text style.</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Au.Controls.KTreeView.Redraw(Au.Controls.ITreeViewItem,System.Boolean)">
            <summary>
            Asynchronously redraws item.
            Does nothing if the control is not created or <i>item</i> is not a visible item in this control.
            </summary>
            <param name="item"></param>
            <param name="remeasure">Remeasure item width. My need this when changed text or text style.</param>
        </member>
        <member name="M:Au.Controls.KTreeView.Redraw(System.Boolean)">
            <summary>
            Asynchronously redraws all items.
            Does nothing if the control is not created.
            </summary>
            <param name="remeasure">Remeasure item width. My need this when changed text or text style.</param>
        </member>
        <member name="P:Au.Controls.KTreeView.ImageCache">
            <summary>
            Gets or sets image cache.
            If not set, uses <see cref="P:Au.More.IconImageCache.Common"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KTreeView.ItemMarginLeft">
            <summary>
            Width of custom-draw area before image. For example for state images.
            Use WPF logical units, not physical pixels.
            </summary>
        </member>
        <member name="P:Au.Controls.KTreeView.ItemMarginRight">
            <summary>
            Width of custom-draw area after item text.
            Use WPF logical units, not physical pixels.
            </summary>
        </member>
        <member name="P:Au.Controls.KTreeView.CustomDraw">
            <summary>
            Custom-draw interface.
            </summary>
        </member>
        <member name="T:Au.Controls.ITreeViewItem">
            <summary>
            Interface for <see cref="T:Au.Controls.KTreeView"/> items. Provides text and other properties.
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.Items">
            <summary>
            Folder's child items. Return null if not folder.
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.IsFolder">
            <summary>
            Is folder.
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.IsExpanded">
            <summary>
            Is expanded folder.
            </summary>
        </member>
        <member name="M:Au.Controls.ITreeViewItem.SetIsExpanded(System.Boolean)">
            <summary>
            Called after expanding or collapsing this folder.
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.DisplayText">
            <summary>
            Text to display.
            </summary>
        </member>
        <member name="M:Au.Controls.ITreeViewItem.SetNewText(System.String)">
            <summary>
            Called after label editing.
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.Image">
            <summary>
            Image to display.
            Alternatively use <see cref="P:Au.Controls.ITreeViewItem.ImageSource"/>.
            </summary>
            <remarks>
            If image's DPI does not match control's DPI (<see cref="P:Au.Controls.KTreeView.Dpi"/>), draws it auto-scaled.
            </remarks>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.ImageSource">
            <summary>
            Where to find image or icon to display.
            Can have prefix:
            "imagefile:" - path of png/bmp/jpg/gif/tif or xaml file.
            "resource:" - path of png/bmp/jpg/gif/tif or xaml resource. Don't need prefix if starts with "resources/", like "resources/file.png".
            "image:" - Base64 encoded image file.
            If without prefix, gets file icon; see <see cref="M:Au.icon.of(System.String,System.Int32,Au.Types.IconGetFlags)"/>.
            </summary>
            <remarks>
            To load image the control calls <see cref="M:Au.More.ImageUtil.LoadGdipBitmap(System.String,System.Nullable{System.ValueTuple{System.Int32,System.Nullable{Au.Types.SIZE}}})"/> or <see cref="M:Au.More.ImageUtil.LoadWpfImageElement(System.String)"/>.
            The control uses <see cref="T:Au.More.IconImageCache"/>; see <see cref="P:Au.Controls.KTreeView.ImageCache"/>.
            </remarks>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.CheckState">
            <summary>
            How to draw checkbox when <see cref="P:Au.Controls.KTreeView.HasCheckboxes"/> true. Default <b>Unchecked</b>.
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.IsDisabled">
            <summary>
            Draw text and checkbox like disabled (usually gray).
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.IsBold">
            <summary>
            Draw bold text.
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.IsSelectable">
            <summary>
            Can be selected. Default true.
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.Color">
            <summary>
            Background color in 0xBBGGRR format. If -1 (default), uses default colors, depending on state (normal, selected, hot).
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.TextColor">
            <summary>
            Text color in 0xBBGGRR format. If -1 (default), uses default colors, depending on state (normal, disabled).
            </summary>
        </member>
        <member name="P:Au.Controls.ITreeViewItem.BorderColor">
            <summary>
            Border color in 0xBBGGRR format. No border if -1 (default).
            </summary>
        </member>
        <member name="T:Au.Controls.TVCheck">
            <summary>
            <see cref="T:Au.Controls.KTreeView"/> checkbox state.
            </summary>
        </member>
        <member name="T:Au.Controls.TVParts">
            <summary>
            <see cref="T:Au.Controls.KTreeView"/> item parts.
            </summary>
        </member>
        <member name="F:Au.Controls.TVParts.Left">
            <summary>Empty area at the left (indentation).</summary>
        </member>
        <member name="F:Au.Controls.TVParts.Checkbox">
            <summary>Get checkbox rectangle.</summary>
        </member>
        <member name="F:Au.Controls.TVParts.MarginLeft">
            <summary>Get left margin rectangle.</summary>
        </member>
        <member name="F:Au.Controls.TVParts.Image">
            <summary>Get image rectangle.</summary>
        </member>
        <member name="F:Au.Controls.TVParts.Text">
            <summary>Get text rectangle, including area to the right. Can be combined with <b>Image</b>.</summary>
        </member>
        <member name="F:Au.Controls.TVParts.MarginRight">
            <summary>Get left margin rectangle.</summary>
        </member>
        <member name="F:Au.Controls.TVParts.Right">
            <summary>Empty area at the right.</summary>
        </member>
        <member name="T:Au.Controls.TVHitTest">
            <summary>
            <see cref="M:Au.Controls.KTreeView.HitTest(Au.Types.POINT,Au.Controls.TVHitTest@)"/> results.
            </summary>
        </member>
        <member name="F:Au.Controls.TVHitTest.item">
            <summary>Item, or null if not on an item.</summary>
        </member>
        <member name="F:Au.Controls.TVHitTest.index">
            <summary>Item index, or -1 if not on an item.</summary>
        </member>
        <member name="F:Au.Controls.TVHitTest.part">
            <summary>Item part.</summary>
        </member>
        <member name="P:Au.Controls.TVItemEventArgs.ModifierKeys">
            <summary>
            Keyboard modifier keys.
            On click it is keys that were pressed at mouse button down event time.
            </summary>
        </member>
        <member name="P:Au.Controls.TVItemEventArgs.XY">
            <summary>
            Mouse position in control at mouse button down event time.
            </summary>
        </member>
        <member name="T:Au.Controls.ITVCustomDraw">
            <summary>
            Custom-draw interface used with <see cref="P:Au.Controls.KTreeView.CustomDraw"/>.
            </summary>
            <remarks>
            When drawing the control, the first and last called functions are <b>Begin</b> and <b>End</b>. For each actually visible item are called functions in this order: <b>DrawBackground</b>, <b>DrawCheckbox</b>, <b>DrawImage</b>, <b>DrawText</b>, <b>DrawMarginLeft</b>, <b>DrawMarginRight</b>. If a bool function returns false, the control draws that part of the item.
            </remarks>
        </member>
        <member name="T:Au.Controls.TVDrawInfo">
            <summary>
            Custom-draw info passed to <see cref="T:Au.Controls.ITVCustomDraw"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.dc">
            <summary>GDI device context handle.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.index">
            <summary>Index of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.item">
            <summary>Current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.rect">
            <summary>Background drawing rectangle of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.imageRect">
            <summary>Image drawing rectangle of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.xText">
            <summary>Text drawing X offset of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.yText">
            <summary>Text drawing Y offset of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.xLeft">
            <summary>Left margin drawing X offset of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.xRight">
            <summary>Right margin drawing X offset of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.marginLeft">
            <summary>Left margin width of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.marginRight">
            <summary>Right margin width of current item.</summary>
        </member>
        <member name="F:Au.Controls.TVDrawInfo.checkSize">
            <summary>Checkbox size.</summary>
        </member>
        <member name="T:Au.Controls.TVDropInfo">
            <summary>See <see cref="M:Au.Controls.KTreeView.GetDropInfo(Au.Controls.TVDropInfo@)"/>.</summary>
        </member>
        <member name="F:Au.Controls.TVDropInfo.xy">
            <summary>Point relative to the top-left of the control without border. Physical pixels.</summary>
        </member>
        <member name="F:Au.Controls.TVDropInfo.targetItem">
            <summary>Item at <b>targetIndex</b>, or null if <b>xy</b> is not on an item.</summary>
        </member>
        <member name="F:Au.Controls.TVDropInfo.targetIndex">
            <summary>Index of item from <b>xy</b>, or -1 if <b>xy</b> is not on an item.</summary>
        </member>
        <member name="F:Au.Controls.TVDropInfo.insertAfter">
            <summary>If true, should insert after the drop target item. Else before. Not used if <b>intoFolder</b> is true.</summary>
        </member>
        <member name="F:Au.Controls.TVDropInfo.intoFolder">
            <summary><b>xy</b> is in a folder center, therefore should move to the folder.</summary>
        </member>
        <member name="M:Au.Controls.KCheckBox.OnCheckChanged(System.Windows.RoutedEventArgs)">
            <summary>
            Raises <see cref="E:Au.Controls.KCheckBox.CheckChanged"/> event.
            </summary>
        </member>
        <member name="E:Au.Controls.KCheckBox.CheckChanged">
            <summary>
            When check state changed (checked/unchecked/indeterminate).
            Can be used to avoid 2-3 event handlers (Checked/Unchecked/Indeterminate).
            </summary>
        </member>
        <member name="T:Au.Controls.KColorPicker">
            <summary>
            WPF control for selecting color.
            </summary>
        </member>
        <member name="P:Au.Controls.KColorPicker.BGR">
            <summary>
            With public functions and events use color format 0xBBGGRR. If false (default), uses 0xRRGGBB.
            </summary>
        </member>
        <member name="T:Au.Controls.KDialogWindow">
            <summary>
            Can be used as base class for WPF windows used as dialogs.
            Adds WS_POPUP style, which prevents activating an unrelated window when closing this active owned nonmodal window (OS bug).
            </summary>
        </member>
        <member name="M:Au.Controls.KDialogWindow.ShowAndWait(System.Windows.Window,System.Boolean)">
            <summary>
            Sets <b>Owner</b>, calls <b>Show</b> and waits until closed.
            Unlike <b>ShowDialog</b>, does not disable thread windows. Also, <b>DialogResult</b> cannot be used.
            </summary>
            <param name="owner"></param>
            <param name="hideOwner">Temporarily hide owner.</param>
        </member>
        <member name="M:Au.Controls.KDialogWindow.OnClosed(System.EventArgs)">
            
        </member>
        <member name="T:Au.Controls.KMenuCommands">
            <summary>
            Builds a WPF window menu with submenus and items that execute static methods defined in a class and nested classes.
            Supports xaml/png/etc images, key/mouse shortcuts, auto-Alt-underline, easy creating of toolbar buttons and context menus with same/synchronized properties (command, text, image, enabled, checked, etc).
            </summary>
            <remarks>
            Creates submenus from public static nested types with <see cref="T:Au.Controls.CommandAttribute"/>. Creates executable menu items from public static methods with <see cref="T:Au.Controls.CommandAttribute"/>.
            From each such type and method creates a <see cref="T:Au.Controls.KMenuCommands.Command"/> object that you can access through indexer.
            Supports methods <c>public static void Method()</c> and <c>public static void Method(object)</c>.
            </remarks>
            <example>
            <code><![CDATA[
            var cmd=new KMenuCommands(typeof(Commands), menu);
            cmd[nameof(Commands.Edit.Paste)].Enabled = false;
            cmd[nameof(Commands.File.Rename)].SetKeys("F12", _window);
            ]]></code>
            
            <code><![CDATA[
            static class Commands {
            	[Command('F')]
            	public static class File {
            		[Command('R')]
            		public static void Rename() {  }
            		
            		[Command('D')]
            		public static void Delete() {  }
            		
            		[Command("_Properties...", image = "properties.xaml")]
            		public static void Properties() {  }
            		
            		[Command('N')]
            		public static class New {
            			[Command('D')]
            			public static void Document() {  }
            			
            			[Command('F')]
            			public static void Folder() {  }
            		}
            		
            		[Command('x', separator = true)]
            		public static void Exit(object param) {  }
            	}
            	
            	[Command('E')]
            	public static class Edit {
            		[Command('t')]
            		public static void Cut() {  }
            		
            		[Command('C')]
            		public static void Copy() {  }
            		
            		[Command('P')]
            		public static void Paste() {  }
            		
            		[Command('D', name = "Edit-Delete")]
            		public static void Delete() {  }
            		
            		[Command('a')]
            		public static void Select_all() {  }
            	}	
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Au.Controls.KMenuCommands.#ctor(System.Type,System.Windows.Controls.Menu,System.Boolean,System.Action{Au.Controls.KMenuCommands.FactoryParams})">
            <summary>
            Builds a WPF window menu with submenus and items that execute static methods defined in a class and nested classes.
            See example in class help.
            </summary>
            <param name="commands">A type that contains nested types with methods. Must be in single source file (not partial class).</param>
            <param name="menu">An empty <b>Menu</b> object. This function adds items to it.</param>
            <param name="autoUnderline">Automatically insert _ in item text for Alt-underlining where not specified explicitly.</param>
            <param name="itemFactory">Optional callback function that is called for each menu item. Can create menu items, set properties, create toolbar buttons, etc.</param>
            <exception cref="T:System.ArgumentException">Duplicate name. Use <see cref="F:Au.Controls.CommandAttribute.name"/>.</exception>
        </member>
        <member name="P:Au.Controls.KMenuCommands.Item(System.String)">
            <summary>
            Gets a <b>Command</b> by name.
            </summary>
            <param name="command">Method name, for example "Select_all". Or nested type name if it's a submenu-item.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Au.Controls.KMenuCommands.TryFind(System.String,Au.Controls.KMenuCommands.Command@)">
            <summary>
            Tries to find a <b>Command</b> by name. Returns false if not found.
            Same as the indexer, but does not throw exception when not found.
            </summary>
            <param name="command">Method name, for example "Select_all". Or nested type name if it's a submenu-item.</param>
            <param name="c"></param>
        </member>
        <member name="M:Au.Controls.KMenuCommands.BindKeysTarget(System.Windows.UIElement,System.String)">
            <summary>
            Adds to <i>target</i>'s <b>InputBindings</b> all keys etc where <b>CommandAttribute.target</b> == <i>name</i>.
            </summary>
            <param name="target"></param>
            <param name="name"></param>
        </member>
        <member name="T:Au.Controls.KMenuCommands.Command">
            <summary>
            Contains a method delegate and a menu item that executes it. Implements <see cref="T:System.Windows.Input.ICommand"/> and can have one or more attached buttons etc and key/mouse shortcuts that execute it. All can be disabled/enabled with single function call.
            Also used for submenu-items (created from nested types); it allows for example to enable/disable all descendants with single function call.
            </summary>
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.MenuItem">
            
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.IsSubmenu">
            <summary>
            true if this is a submenu-item.
            </summary>
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.Name">
            <summary>
            Method name. If submenu-item - type name. Or <see cref="F:Au.Controls.CommandAttribute.name"/>.
            </summary>
        </member>
        <member name="M:Au.Controls.KMenuCommands.Command.ToString">
            
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.ButtonText">
            <summary>
            Button text or tooltip. Same as menu item text but without _ for Alt-underline.
            </summary>
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.ButtonTooltip">
            <summary>
            <see cref="F:Au.Controls.CommandAttribute.tooltip"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.SubmenuOpened">
            <summary>
            Setter subscribes to <see cref="E:System.Windows.Controls.MenuItem.SubmenuOpened"/> event.
            Will propagate to copied submenus.
            Call once.
            </summary>
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.Tag">
            <summary>
            Something to attach to this object. Not used by this class.
            </summary>
        </member>
        <member name="M:Au.Controls.KMenuCommands.Command.CopyToButton(System.Windows.Controls.Primitives.ButtonBase,System.Nullable{System.Windows.Controls.Dock},System.Windows.UIElement,System.String,System.Boolean)">
            <summary>
            Sets properties of a button to match properties of this menu item.
            </summary>
            <param name="b">Button or checkbox etc.</param>
            <param name="imageAt">If menu item has image, set <b>Content</b> = <b>DockPanel</b> with image and text and dock image at this side. If null (default), sets image without text. Not used if there is no image.</param>
            <param name="image">Button image element, if different than menu item image. Must not be a child of something.</param>
            <param name="text">Button text, if different than menu item text.</param>
            <param name="skipImage">Don't change image.</param>
            <exception cref="T:System.InvalidOperationException">This is a submenu. Or called from factory action before <see cref="M:Au.Controls.KMenuCommands.FactoryParams.SetMenuItem(System.Windows.Controls.MenuItem)"/>.</exception>
            <remarks>
            Sets these properties:
            - <b>Content</b> (image or/and text),
            - <b>ToolTip</b>,
            - <b>Foreground</b>,
            - <b>Command</b> (to execute same method and automatically enable/disable together),
            - Automation Name (if with image),
            - if checkable, synchronizes checked state (the button should be a ToggleButton (CheckBox or RadioButton)).
            </remarks>
        </member>
        <member name="M:Au.Controls.KMenuCommands.Command.CopyToMenu(System.Windows.Controls.MenuItem,System.Windows.UIElement,System.Object)">
            <summary>
            Sets properties of another menu item (not in this menu) to match properties of this menu item.
            If this is a submenu-item, copies with descendants.
            </summary>
            <param name="m"></param>
            <param name="image">Image element (<see cref="P:System.Windows.Controls.MenuItem.Icon"/>), if different. Must not be a child of something.</param>
            <param name="text">Text (<see cref="P:System.Windows.Controls.HeaderedItemsControl.Header"/>), if different.</param>
            <exception cref="T:System.InvalidOperationException">Called from factory action before <see cref="M:Au.Controls.KMenuCommands.FactoryParams.SetMenuItem(System.Windows.Controls.MenuItem)"/>.</exception>
            <remarks>
            Sets these properties:
            - <b>Header</b> (if string),
            - <b>Icon</b> (if possible),
            - <b>InputGestureText</b>,
            - <b>ToolTip</b>,
            - <b>Foreground</b>,
            - <b>Command</b> (to execute same method and automatically enable/disable together),
            - <b>IsCheckable</b> (and synchronizes checked state).
            </remarks>
        </member>
        <member name="M:Au.Controls.KMenuCommands.Command.CopyToMenu(System.Windows.Controls.ContextMenu)">
            <summary>
            Copies descendants of this submenu to a context menu.
            </summary>
            <exception cref="T:System.InvalidOperationException">This is not a submenu. Or called from factory action before <see cref="M:Au.Controls.KMenuCommands.FactoryParams.SetMenuItem(System.Windows.Controls.MenuItem)"/>.</exception>
            <remarks>
            For each new item sets the same properties as other overload.
            </remarks>
        </member>
        <member name="M:Au.Controls.KMenuCommands.Command.CopyImage">
            <summary>
            Copies menu item image element. Returns null if no image or cannot copy.
            </summary>
            <exception cref="T:System.InvalidOperationException">Called from factory action before <see cref="M:Au.Controls.KMenuCommands.FactoryParams.SetMenuItem(System.Windows.Controls.MenuItem)"/>.</exception>
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.Enabled">
            <summary>
            Gets or sets enabled/disabled state of this command, menu item and all controls with <b>Command</b> property = this (see <see cref="M:Au.Controls.KMenuCommands.Command.CopyToButton(System.Windows.Controls.Primitives.ButtonBase,System.Nullable{System.Windows.Controls.Dock},System.Windows.UIElement,System.String,System.Boolean)"/>, <see cref="M:Au.Controls.KMenuCommands.Command.CopyToMenu(System.Windows.Controls.MenuItem,System.Windows.UIElement,System.Object)"/>).
            If submenu-item, the 'set' function also enables/disables all descendants.
            </summary>
            <exception cref="T:System.InvalidOperationException">Called from factory action before <see cref="M:Au.Controls.KMenuCommands.FactoryParams.SetMenuItem(System.Windows.Controls.MenuItem)"/>.</exception>
        </member>
        <member name="P:Au.Controls.KMenuCommands.Command.Checked">
            <summary>
            Gets or sets checked state of this checkable menu item and all checkable controls with <b>Command</b> property = this (see <see cref="M:Au.Controls.KMenuCommands.Command.CopyToButton(System.Windows.Controls.Primitives.ButtonBase,System.Nullable{System.Windows.Controls.Dock},System.Windows.UIElement,System.String,System.Boolean)"/>, <see cref="M:Au.Controls.KMenuCommands.Command.CopyToMenu(System.Windows.Controls.MenuItem,System.Windows.UIElement,System.Object)"/>).
            </summary>
            <exception cref="T:System.InvalidOperationException">Called from factory action before <see cref="M:Au.Controls.KMenuCommands.FactoryParams.SetMenuItem(System.Windows.Controls.MenuItem)"/>.</exception>
        </member>
        <member name="E:Au.Controls.KMenuCommands.Command.CanExecuteChanged">
            <summary>
            When disabled or enabled with <see cref="P:Au.Controls.KMenuCommands.Command.Enabled"/>.
            </summary>
        </member>
        <member name="M:Au.Controls.KMenuCommands.Command.FindButtonInToolbar(System.Windows.Controls.ToolBar)">
            <summary>
            Finds and returns toolbar button that has this command. Returns null if not found.
            </summary>
        </member>
        <member name="M:Au.Controls.KMenuCommands.InitToolbarsAndCustomize(System.String,System.String,System.Windows.Controls.ToolBar[])">
            <summary>
            Adds toolbar buttons specified in <i>xmlFileCustomized</i> or <i>xmlFileDefault</i>. Applies customizations specified there.
            </summary>
            <param name="xmlFileDefault">XML file containing default toolbar buttons. See Default\Commands.xml in editor project.</param>
            <param name="xmlFileCustomized">XML file containing user-modified commands and toolbar buttons. Can be null.</param>
            <param name="toolbars">Empty toolbars where to add buttons. XML tag = <b>Name</b> property.</param>
        </member>
        <member name="T:Au.Controls.KMenuCommands.FactoryParams">
            <summary>
            Parameters for factory action of <see cref="T:Au.Controls.KMenuCommands"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.KMenuCommands.FactoryParams.command">
            <summary>
            The new command.
            <see cref="P:Au.Controls.KMenuCommands.Command.MenuItem"/> is still null and you can call <see cref="M:Au.Controls.KMenuCommands.FactoryParams.SetMenuItem(System.Windows.Controls.MenuItem)"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.KMenuCommands.FactoryParams.member">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> of method or <see cref="T:System.Reflection.TypeInfo"/> of nested class.
            For example allows to get attributes of any type.
            </summary>
        </member>
        <member name="F:Au.Controls.KMenuCommands.FactoryParams.text">
            <summary>
            Text or a WPF element to add to the text part of the menu item. In/out parameter.
            Text may contain _ for Alt-underline, whereas <c>command.Text</c> is without it.
            </summary>
        </member>
        <member name="F:Au.Controls.KMenuCommands.FactoryParams.image">
            <summary><see cref="F:Au.Controls.CommandAttribute.image"/>. In/out parameter.</summary>
        </member>
        <member name="F:Au.Controls.KMenuCommands.FactoryParams.param">
            <summary><see cref="F:Au.Controls.CommandAttribute.param"/>. In/out parameter. This class does not use it.</summary>
        </member>
        <member name="M:Au.Controls.KMenuCommands.FactoryParams.SetMenuItem(System.Windows.Controls.MenuItem)">
            <summary>
            Sets <see cref="P:Au.Controls.KMenuCommands.Command.MenuItem"/> property.
            If your factory action does not call this function, the menu item will be created after it returns.
            </summary>
            <param name="mi">Your created menu item. If null, this function creates standard menu item.</param>
            <remarks>
            Uses the <i>text</i> and <i>image</i> fields; you can change them before. Sets menu item's <b>Icon</b> property if image!=null and mi?.Image==null. Sets <b>Header</b> property only if creates new item.
            The menu item will be added to the parent menu after your factory action returns.
            </remarks>
        </member>
        <member name="T:Au.Controls.CommandAttribute">
            <summary>
            Used with <see cref="T:Au.Controls.KMenuCommands"/>.
            Allows to add menu items in the same order as methods and nested types, and optionally specify menu item text etc.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.name">
            <summary>
            Command name to use instead of method/type name. Use to resolve duplicate name conflict.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.text">
            <summary>
            Menu item text. Use _ to Alt-underline a character. If "...", appends it to default text.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.underlined">
            <summary>
            Alt-underlined character in menu item text.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.separator">
            <summary>
            Add separator before the menu item.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.checkable">
            <summary>
            Checkable menu item.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.keys">
            <summary>
            Default hotkey etc. See <see cref="M:Au.Controls.KMenuCommands.BindKeysTarget(System.Windows.UIElement,System.String)"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.target">
            <summary>
            Element where the hotkey etc (default or customized) will work. See <see cref="M:Au.Controls.KMenuCommands.BindKeysTarget(System.Windows.UIElement,System.String)"/>.
            If this property applied to a class (submenu), all descendant commands without this property inherit it from the ancestor class.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.keysText">
            <summary>
            Text for <see cref="P:System.Windows.Controls.MenuItem.InputGestureText"/>. If not set, will use <b>keys</b>.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.image">
            <summary>
            Image string.
            The factory action receives this string in parameters. It can load image and set menu item's <b>Icon</b> property.
            If factory action not used or does not set <b>Image</b> property and does not set image=null, this class loads image from exe or script resources and sets <b>Icon</b> property. The resource file can be xaml (for example converted from svg) or png etc. If using Visual Studio, to add an image to resources set its build action = Resource. More info: <see cref="T:Au.More.ResourceUtil"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.tooltip">
            <summary>
            Let <see cref="M:Au.Controls.KMenuCommands.Command.CopyToButton(System.Windows.Controls.Primitives.ButtonBase,System.Nullable{System.Windows.Controls.Dock},System.Windows.UIElement,System.String,System.Boolean)"/> use this text for tooltip.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.param">
            <summary>
            A string or other value to pass to the factory action.
            </summary>
        </member>
        <member name="F:Au.Controls.CommandAttribute.hide">
            <summary>
            Don't add the <b>MenuItem</b> to menu.
            </summary>
        </member>
        <member name="M:Au.Controls.CommandAttribute.#ctor(System.Int32)">
            <summary>
            Sets menu item text = method/type name with spaces instead of _ , like Select_all -> "Select all".
            </summary>
            <param name="l_">[](xref:caller_info)</param>
        </member>
        <member name="M:Au.Controls.CommandAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Specifies menu item text.
            </summary>
            <param name="text">Menu item text. Use _ to Alt-underline a character, like "_Copy".</param>
            <param name="l_">[](xref:caller_info)</param>
        </member>
        <member name="M:Au.Controls.CommandAttribute.#ctor(System.Char,System.Int32)">
            <summary>
            Specifies Alt-underlined character. Sets menu item text = method/type name with spaces instead of _ , like Select_all -> "Select all".
            </summary>
            <param name="underlined">Character to underline.</param>
            <param name="l_">[](xref:caller_info)</param>
        </member>
        <member name="T:Au.Controls.KPopup">
            <summary>
            HwndSource-based window to use for various temporary tool/info popup windows.
            For example, in editor used for code info windows (completion list, parameters, "Regex" etc) and for some tooltips.
            Unlike Window and Popup, you can set any window style, easily show at any position at any DPI, etc.
            Like Popup, can show by rectangle. Unlike Popup, can be resizable.
            Like Popup, can be click-closed, and does not eat mouse events like Popup.
            </summary>
        </member>
        <member name="M:Au.Controls.KPopup.#ctor(Au.Types.WS,Au.Types.WSE,System.Boolean,System.Windows.SizeToContent)">
            
        </member>
        <member name="P:Au.Controls.KPopup.Hwnd">
            <summary>
            Gets popup window handle. Returns default(wnd) if not created (also after destroying).
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.WindowName">
            <summary>
            Gets or sets window name.
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.Name">
            <summary>
            Gets or sets this <b>KPopup</b> object name. It is not window name.
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.Content">
            <summary>
            Gets or sets WPF content. It is child of <see cref="P:Au.Controls.KPopup.Border"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.Border">
            <summary>
            Gets the WPF root object (<see cref="P:System.Windows.Interop.HwndSource.RootVisual"/>) of the popup window. Its child is <see cref="P:Au.Controls.KPopup.Content"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.Size">
            <summary>
            Desired window size. WPF logical pixels.
            Actual size can be smaller if would not fit in screen.
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.WpfSizeToContent">
            <summary>
            Set <see cref="P:System.Windows.Interop.HwndSource.SizeToContent"/>.
            If false (default), this class calculates content size when showing, and does not update while showing. If true, may align incorrectly.
            </summary>
        </member>
        <member name="M:Au.Controls.KPopup.ShowByRect(System.Object,System.Nullable{System.Windows.Controls.Dock},System.Nullable{Au.Types.RECT},System.Boolean,System.Boolean)">
            <summary>
            Shows the popup window by a window, WPF element or rectangle.
            </summary>
            <param name="owner">Provides owner window and optionally rectangle. Can be <b>FrameworkElement</b>, <b>KPopup</b>, <b>wnd</b> or null.</param>
            <param name="side">Show at this side of rectangle, or opposite side if does not fit in screen. If null, shows in rectangle.</param>
            <param name="rScreen">Rectangle in screen (physical pixels). If null, uses owner's rectangle. Cannot be both null.</param>
            <param name="exactSize">If does not fit in screen, cover part of rectangle but don't make smaller.</param>
            <param name="exactSide">Never show at opposite side.</param>
            <exception cref="T:System.NotSupportedException">Unsupported <i>owner</i> type.</exception>
            <exception cref="T:System.ArgumentException">Both owner and rScreen are null. Or owner handle not created.</exception>
            <remarks>
            If <see cref="P:Au.Controls.KPopup.Size"/> not set, uses <see cref="F:System.Windows.SizeToContent.WidthAndHeight"/>.
            </remarks>
        </member>
        <member name="M:Au.Controls.KPopup.Close">
            <summary>
            Destroys or hides the popup window, depending on <see cref="P:Au.Controls.KPopup.CloseHides"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.CloseHides">
            <summary>
            Don't destroy the popup window when closing, but just hide.
            In any case, if destroyed, <b>ShowX</b> will create new window.
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.UserClosed">
            <summary>
            true if closed (or hidden if <see cref="P:Au.Controls.KPopup.CloseHides"/>) when the user clicked the x button.
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.IsVisible">
            <summary>
            Whether the popup window is currently visible.
            </summary>
        </member>
        <member name="E:Au.Controls.KPopup.Hidden">
            <summary>
            When the popup window becomes invisible. It also happend when destroying.
            </summary>
        </member>
        <member name="E:Au.Controls.KPopup.Destroyed">
            <summary>
            When destroying the popup window (WM_NCDESTROY).
            </summary>
        </member>
        <member name="P:Au.Controls.KPopup.ClickClose">
            <summary>
            Close when mouse clicked.
            </summary>
        </member>
        <member name="T:Au.Controls.KPopupListBox">
            <summary>
            Simple <see cref="T:System.Windows.Controls.Primitives.Popup"/> with child <see cref="T:System.Windows.Controls.ListBox"/>.
            </summary>
            <remarks>
            The <see cref="P:Au.Controls.KPopupListBox.Control"/> property gets the <b>ListBox</b>. Add items to it.
            Show the popup as usually (set <b>PlacementTarget</b> etc and <b>IsOpen</b>=true).
            
            When an item clicked, closes the popup and fires <see cref="E:Au.Controls.KPopupListBox.OK"/> event. Also when pressed Enter key when an item is selected.
            Closes the popup without the event when clicked outside or pressed Esc key.
            </remarks>
        </member>
        <member name="M:Au.Controls.KPopupListBox.#ctor">
            
        </member>
        <member name="P:Au.Controls.KPopupListBox.Control">
            <summary>
            Gets the <b>ListBox</b>.
            </summary>
        </member>
        <member name="E:Au.Controls.KPopupListBox.OK">
            <summary>
            When an item clicked, or pressed Enter key and there is a selected item.
            The popup is already closed.
            </summary>
        </member>
        <member name="M:Au.Controls.KPopupListBox.OnOpened(System.EventArgs)">
            
        </member>
        <member name="M:Au.Controls.KPopupListBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KPopupListBox.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            
        </member>
        <member name="T:Au.Controls.KWpfMenu">
            <summary>
            Based on WPF <see cref="T:System.Windows.Controls.ContextMenu"/>, makes simpler to use it.
            </summary>
            <example>
            <code><![CDATA[
            var m = new KWpfMenu();
            m["One"] = o => print.it(o);
            using(m.Submenu("Sub")) {
            	m["Three"] = o => print.it(o);
            	m["Four"] = o => print.it(o);
            }
            m.Separator();
            m["Two"] = o => { print.it(o); };
            m.Show(this); //or m.IsOpen=true;
            ]]></code>
            </example>
        </member>
        <member name="M:Au.Controls.KWpfMenu.#ctor">
            
        </member>
        <member name="M:Au.Controls.KWpfMenu.Add(System.Object,System.Action{Au.Controls.WpfMenuActionArgs},System.Object)">
            <summary>
            Creates new <see cref="T:System.Windows.Controls.MenuItem"/> and adds to the menu. Returns it.
            </summary>
            <param name="text">
            Label. See <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header"/>.
            If contains '\0' character, uses text before it for label and text after it for <see cref="P:System.Windows.Controls.MenuItem.InputGestureText"/>; example: "Text\0" + "Ctrl+E".
            </param>
            <param name="click">Action called on click.</param>
            <param name="icon">See <see cref="P:Au.Controls.KWpfMenu.Item(System.String,System.Boolean,System.Object)"/>.</param>
            <remarks>
            Usually it's easier to use the indexer instead. It just calls this function. See example.
            </remarks>
            <example>
            <code><![CDATA[
            m["Example"] = o => print.it(o);
            m.Last.IsChecked = true;
            ]]></code>
            </example>
        </member>
        <member name="P:Au.Controls.KWpfMenu.Item(System.String,System.Boolean,System.Object)">
            <summary>
            Creates new <see cref="T:System.Windows.Controls.MenuItem"/> and adds to the menu.
            </summary>
            <param name="text">
            Label. See <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header"/>.
            If contains '\0' character, uses text before it for label and text after it for <see cref="P:System.Windows.Controls.MenuItem.InputGestureText"/>; example: "Text\0" + "Ctrl+E".
            </param>
            <param name="enabled">Disabled if false. Default true.</param>
            <param name="icon">
            Can be:
            - <see cref="T:System.Windows.Controls.Image"/> or other WPF control to assign directly to <see cref="P:System.Windows.Controls.MenuItem.Icon"/>.
            - <see cref="T:System.Windows.Media.ImageSource"/> - a WPF image. To create image from icon, use <see cref="M:Au.icon.ToWpfImage(System.Boolean)"/>.
            - string - image file path, or resource path that starts with "resources/" or has prefix "resource:", or Base64 encoded image with prefix "image:". Can be XAML file or resource. See <see cref="M:Au.More.ImageUtil.LoadWpfImageElement(System.String)"/>. Supports environment variables. If not full path, looks in <see cref="P:Au.folders.ThisAppImages"/>.
            - <see cref="T:System.Uri"/> - image file path, or resource pack URI, or URL. Does not support environment variables and <see cref="P:Au.folders.ThisAppImages"/>.
            
            If failed to find or load image file, prints warning (<see cref="M:Au.print.warning(System.String,System.Int32,System.String)"/>).
            To create Base64 string, use menu Code -> uiimage.
            To add an image resource in Visual Studio, use build action "Resource" for the image file.
            </param>
            <value>Action called on click.</value>
            <remarks>
            Calls <see cref="M:Au.Controls.KWpfMenu.Add(System.Object,System.Action{Au.Controls.WpfMenuActionArgs},System.Object)"/>.
            </remarks>
            <example>
            <code><![CDATA[
            m["Example"] = o => print.it(o);
            m.Last.IsChecked = true;
            ]]></code>
            </example>
        </member>
        <member name="M:Au.Controls.KWpfMenu.Separator">
            <summary>
            Adds separator.
            </summary>
        </member>
        <member name="M:Au.Controls.KWpfMenu.Submenu(System.Object,System.Object,System.Action{Au.Controls.WpfMenuActionArgs})">
            <summary>
            Creates new <see cref="T:System.Windows.Controls.MenuItem"/> for a submenu and adds to the menu.
            </summary>
            <param name="text">Label. See <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header"/>.</param>
            <param name="icon"><see cref="P:System.Windows.Controls.MenuItem.Icon"/>.</param>
            <param name="click">Action called on click. Rarely used.</param>
            <remarks>
            Then the add-item functions will add items to the submenu, until the returned variable is disposed.
            </remarks>
            <example><see cref="T:Au.Controls.KWpfMenu"/></example>
        </member>
        <member name="P:Au.Controls.KWpfMenu.CurrentAddMenu">
            <summary>
            Gets <see cref="T:System.Windows.Controls.ItemsControl"/> of the menu or submenu where new items currently would be added.
            </summary>
        </member>
        <member name="P:Au.Controls.KWpfMenu.Last">
            <summary>
            Gets the last added <see cref="T:System.Windows.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.KWpfMenu.ItemAdded">
            <summary>
            Called when added a non-separator item.
            </summary>
        </member>
        <member name="P:Au.Controls.KWpfMenu.ActionException">
            <summary>
            Whether to handle exceptions in item action code. If false (default), handles exceptions and on exception calls <see cref="M:Au.print.warning(System.String,System.Int32,System.String)"/>.
            Applied to menu items added afterwards.
            </summary>
        </member>
        <member name="M:Au.Controls.KWpfMenu.Show(System.Windows.UIElement,System.Boolean,System.Boolean)">
            <summary>
            Sets <see cref="P:System.Windows.Controls.ContextMenu.PlacementTarget"/> = <i>owner</i> and <see cref="P:System.Windows.Controls.ContextMenu.IsOpen"/> = true.
            </summary>
            <param name="owner"><see cref="P:System.Windows.Controls.ContextMenu.PlacementTarget"/>. The menu uses its DPI. If null, uses DPI of primary screen (WPF bug).</param>
            <param name="byCaret">Show by caret (text cursor) position if possible.</param>
            <param name="modal">Wait until closed.</param>
        </member>
        <member name="M:Au.Controls.KWpfMenu.OnClosed(System.Windows.RoutedEventArgs)">
            
        </member>
        <member name="M:Au.Controls.KWpfMenu.ShowSimple(Au.Types.DStringList,System.Windows.UIElement,System.Boolean,System.Action{Au.Controls.KWpfMenu})">
            <summary>
            Creates and shows popup menu where items use ids instead of actions.
            Returns selected item id, or 0 if cancelled.
            </summary>
            <param name="items">
            Menu items. Can be string[], List&lt;string&gt; or string like "One|Two|Three".
            Item id can be optionally specified like "1 One|2 Two|3 Three". If missing, uses id of previous non-separator item + 1. Example: "One|Two|100 Three Four" //1|2|100|101.
            For separators use null or empty strings: "One|Two||Three|Four".
            </param>
            <param name="owner"><see cref="P:System.Windows.Controls.ContextMenu.PlacementTarget"/>. The menu uses its DPI. If null, uses DPI of primary screen (WPF bug).</param>
            <param name="byCaret">Show by caret (text cursor) position if possible.</param>
            <param name="beforeShow">Called after adding menu items, before showing the menu. For example can set placement properties.</param>
            <remarks>
            The menu is modal; the function returns when closed.
            </remarks>
            <seealso cref="M:Au.dialog.showList(Au.Types.DStringList,System.String,System.String,Au.Types.DFlags,Au.Types.AnyWnd,System.String,System.String,System.String,Au.Types.DControls,System.Int32,Au.Types.Coord,Au.Types.Coord,System.Int32,System.Action{Au.Types.DEventArgs})"/>
        </member>
        <member name="T:Au.Controls.WpfMenuActionArgs">
            <summary>
            Arguments for <see cref="T:Au.Controls.KWpfMenu"/> item actions.
            </summary>
        </member>
        <member name="M:Au.Controls.WpfMenuActionArgs.#ctor(System.Windows.Controls.MenuItem)">
            
        </member>
        <member name="P:Au.Controls.WpfMenuActionArgs.Item">
            <summary>
            The menu item object.
            </summary>
        </member>
        <member name="M:Au.Controls.WpfMenuActionArgs.ToString">
            
        </member>
        <member name="T:Au.Controls.GdiTextRenderer">
            <summary>
            Draws text using fastest GDI API such as TextOut and standard UI font.
            Can easily draw string parts with different colors/styles without measuring.
            Must be disposed.
            </summary>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.#ctor(System.IntPtr,System.Int32)">
            <summary>Object created with this ctor can draw and measure.</summary>
            <param name="hdc">Device context handle. <b>Dispose</b> will not release it.</param>
            <param name="dpi"></param>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.#ctor(System.Int32)">
            <summary>Object created with this ctor can measure only. Uses screen DC.</summary>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.MoveTo(System.Int32,System.Int32)">
            <summary>
            Sets the current drawing position of the DC.
            Returns previous position.
            </summary>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.GetCurrentPosition">
            <summary>
            Gets the current drawing position of the DC.
            </summary>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.DrawText(System.String,System.Int32,System.Nullable{System.Range})">
            <summary>
            Draws text at the current drawing position of the DC, and updates it.
            </summary>
            <param name="color">0xBBGGRR</param>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.DrawText(System.String,Au.Types.POINT,System.Int32,System.Nullable{System.Range})">
            <summary>
            Draws text at specified position. Does not use/update the current drawing position of the DC.
            </summary>
            <param name="color">0xBBGGRR</param>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.DrawText(System.String,Au.Types.RECT@,System.Int32,System.Nullable{System.Range})">
            <summary>
            Draws text clipped in specified rectangle. Does not use/update the current drawing position of the DC.
            </summary>
            <param name="color">0xBBGGRR</param>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.#ctor(System.Windows.FrameworkElement,Au.wnd)">
            <param name="e">HwndHost or its container control (if the HwndHost is part of the control).</param>
            <param name="w">Native control hosted by the HwndHost.</param>
        </member>
        <member name="P:Au.Controls.HwndHostAccessibleBase_.ChildCount">
            <summary>
            Returns 0.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.Name(System.Int32)">
            <summary>
            Returns FrameworkElement.Name.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.Value(System.Int32)">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.Description(System.Int32)">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.State(System.Int32)">
            <summary>
            If self (child -1), returns combination of FOCUSABLE, FOCUSED, DISABLED, INVISIBLE. Else returns 0.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.Help(System.Int32)">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.KeyboardShortcut(System.Int32)">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="P:Au.Controls.HwndHostAccessibleBase_.FocusedChild">
            <summary>
            Returns -1.
            Called only if the control is focused.
            </summary>
        </member>
        <member name="P:Au.Controls.HwndHostAccessibleBase_.SelectedChildren">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.DefaultAction(System.Int32)">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.SelectChild(Au.Types.ESelect,System.Int32)">
            <summary>
            Does nothing.
            Not called for self.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.ChildRect(System.Int32)">
            <summary>
            Returns default.
            Return child rect in client area.
            Not called for self.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.Navigate(Au.Types.Api.NAVDIR,System.Int32)">
            <summary>
            Returns null.
            If self (childStart==-1), navDir is FIRSTCHILD or LASTCHILD, else navDir is any except these.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns -1.
            x y are in client area.
            Not called if not in client area.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.DoDefaultAction(System.Int32)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Au.Controls.HwndHostAccessibleBase_.WmGetobject(System.IntPtr,System.IntPtr)">
            <summary>
            Call in hook wndproc on WM_GETOBJECT like this: <c>handled = true; return (_acc ??= new _Accessible(this)).WmGetobject(wParam, lParam);</c>.
            If lParam is EObjid.CLIENT, calls API LresultFromObject(this), else calls API DefWindowProc.
            </summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.BitmapFileInfo_.biHeader">
            <summary>
            Can be BITMAPINFOHEADER/BITMAPV5HEADER or BITMAPCOREHEADER.
            </summary>
        </member>
        <member name="M:Au.Controls.KImageUtil.GetBitmapFileInfo_(System.Byte[],Au.Controls.KImageUtil.BitmapFileInfo_@)">
            <summary>
            Gets some info from BITMAPINFOHEADER or BITMAPCOREHEADER.
            Checks if it is valid bitmap file header. Returns false if invalid.
            </summary>
        </member>
        <member name="T:Au.Controls.KImageUtil.ImageType">
            <summary>
            Image type detected by <see cref="M:Au.Controls.KImageUtil.ImageTypeFromString(System.Int32@,System.String)"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.None">
            <summary>The string isn't image.</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.Base64Image">
            <summary>Base64 encoded image file data with prefix "image:" (.png/gif/jpg) or "image:WkJN" (compressed .bmp). See <see cref="M:Au.Controls.KImageUtil.ImageToString(System.String)"/>.</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.Bmp">
            <summary>.bmp file path.</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.PngGifJpg">
            <summary>.png, .gif or .jpg file path.</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.Ico">
            <summary>.ico file path.</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.Cur">
            <summary>.cur or .ani file path.</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.IconLib">
            <summary>Icon from a .dll or other file containing icons, like @"C:\a\b.dll,15".</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.ShellIcon">
            <summary>None of other image types.</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.Xaml">
            <summary>XAML image data.</summary>
        </member>
        <member name="F:Au.Controls.KImageUtil.ImageType.XamlIconName">
            <summary>XAML icon name "*Pack.Icon color".</summary>
        </member>
        <member name="M:Au.Controls.KImageUtil.ImageTypeFromString(System.Int32@,System.Byte*,System.Int32)">
            <summary>
            Gets image type from string.
            </summary>
            <param name="prefixLength">Length of prefix "imagefile:" or "image:".</param>
            <param name="s">File path etc. See <see cref="T:Au.Controls.KImageUtil.ImageType"/>. It is UTF8 because used directly with Scintilla text.</param>
            <param name="length">If -1, calls CharPtr_.Length(s).</param>
        </member>
        <member name="M:Au.Controls.KImageUtil.ImageTypeFromString(System.Int32@,System.String)">
            <summary>
            Gets image type from string.
            </summary>
            <param name="prefixLength">Length of prefix "imagefile:" or "image:".</param>
            <param name="s">File path etc. See <see cref="T:Au.Controls.KImageUtil.ImageType"/>.</param>
        </member>
        <member name="M:Au.Controls.KImageUtil.BmpFileDataFromString(System.String,Au.Controls.KImageUtil.ImageType,System.Boolean,System.Nullable{System.ValueTuple{System.Int32,System.Nullable{Au.Types.SIZE}}})">
            <summary>
            Loads image and returns its data in .bmp file format.
            Returns null if fails, for example file not found or invalid Base64 string.
            </summary>
            <param name="s">Depends on t. File path or resource name without prefix "imagefile:" or Base64 image data without prefix "image:".</param>
            <param name="t">Image type and string format.</param>
            <param name="searchPath">Use <see cref="M:Au.filesystem.searchPath(System.String,System.String[])"/></param>
            <param name="xaml">If not null, supports XAML images. See <see cref="M:Au.More.ImageUtil.LoadGdipBitmapFromXaml(System.String,System.Int32,System.Nullable{Au.Types.SIZE})"/>.</param>
            <remarks>Supports environment variables etc. If not full path, searches in <see cref="P:Au.folders.ThisAppImages"/>.</remarks>
        </member>
        <member name="M:Au.Controls.KImageUtil.BmpFileDataToString(System.Byte[])">
            <summary>
            Compresses .bmp file data (<see cref="M:Au.More.Convert2.BrotliCompress(System.ReadOnlySpan{System.Byte},System.Int32)"/>) and Base64-encodes.
            Returns string with "image:" prefix.
            </summary>
        </member>
        <member name="M:Au.Controls.KImageUtil.ImageToString(System.String)">
            <summary>
            Converts image file data to string that can be used in source code instead of file path. It is supported by some functions of this library, for example <see cref="M:Au.uiimage.find(Au.Types.IFArea,Au.Types.IFImage,Au.Types.IFFlags,System.Int32,System.Func{Au.uiimage,Au.Types.IFAlso})"/>.
            Supports all <see cref="T:Au.Controls.KImageUtil.ImageType"/> formats. For non-image files gets icon. Converts icons to bitmap.
            If <i>path</i> is of <see cref="T:Au.Controls.KImageUtil.ImageType"/> type <b>Base64Image</b>, <b>Xaml</b> or <b>XamlIconName</b>, returns <i>path</i>. Else returns Base64 encoded file data with prefix "image:" (.png/gif/jpg) or "image:WkJN" (compressed .bmp).
            Returns null if path is not a valid image string or the file does not exist or failed to load.
            </summary>
            <remarks>Supports environment variables etc. If not full path, searches in <see cref="P:Au.folders.ThisAppImages"/> and standard directories.</remarks>
        </member>
        <member name="M:Au.Controls.KImageUtil.XamlImageToIconFile(System.IO.Stream,System.String,System.Int32[])">
            <summary>
            Converts XAML image to native icon file data.
            </summary>
            <param name="stream">Stream to write icon file data. Writes from start.</param>
            <param name="image">Image XAML. See <see cref="M:Au.More.ImageUtil.LoadWpfImageElement(System.String)"/>.</param>
            <param name="sizes">Sizes of icon images to add to the ico file. For example 16, 24, 32, 48, 64. Sizes can be 1 to 256 inclusive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">An invalid size.</exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Au.Controls.KImageUtil.XamlImageToIconFile(System.String,System.String,System.Int32[])">
            
        </member>
        <member name="T:Au.Tools.KCheckTextBox">
            <summary>
            KCheckBox and TextBox. Optionally + Button and KPopupListBox.
            </summary>
        </member>
        <member name="M:Au.Tools.KCheckTextBox.#ctor(Au.Controls.KCheckBox,System.Windows.Controls.TextBox,System.Windows.Controls.Button)">
            
        </member>
        <member name="M:Au.Tools.KCheckTextBox.Deconstruct(Au.Controls.KCheckBox@,System.Windows.Controls.TextBox@)">
            
        </member>
        <member name="P:Au.Tools.KCheckTextBox.Visible">
            <summary>
            Gets or sets <b>Visibility</b> of controls. If false, <b>Visibility</b> is <b>Collapsed</b>.
            </summary>
        </member>
        <member name="M:Au.Tools.KCheckTextBox.GetText(System.String@,System.Boolean)">
            <summary>
            If checked and visible and text not empty, gets text and returns true. Else sets s=null and returns false.
            </summary>
            <param name="s"></param>
            <param name="emptyToo">If text empty, get "" and return true.</param>
        </member>
        <member name="T:Au.Tools.KCheckComboBox">
            <summary>
            KCheckBox and ComboBox.
            </summary>
        </member>
        <member name="M:Au.Tools.KCheckComboBox.#ctor(Au.Controls.KCheckBox,System.Windows.Controls.ComboBox)">
            
        </member>
        <member name="M:Au.Tools.KCheckComboBox.Deconstruct(Au.Controls.KCheckBox@,System.Windows.Controls.ComboBox@)">
            
        </member>
        <member name="P:Au.Tools.KCheckComboBox.Visible">
            <summary>
            Gets or sets <b>Visibility</b> of controls. If false, <b>Visibility</b> is <b>Collapsed</b>.
            </summary>
        </member>
        <member name="M:Au.Tools.KCheckComboBox.GetIndex(System.Int32@)">
            <summary>
            If checked and visible, gets selected item index and returns true. Else sets index=-1 and returns false.
            </summary>
        </member>
        <member name="M:Au.Tools.KCheckComboBox.GetText(System.String@)">
            <summary>
            If checked and visible, gets selected item text and returns true. Else sets text=null and returns false.
            </summary>
        </member>
        <member name="T:Au.Tools.KExtWpf">
            <summary>
            Extension methods for dialogs.
            </summary>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddCheck(Au.wpfBuilder,System.String,System.Boolean)">
            <summary>
            Adds KCheckBox that can be used with TextBox in a propertygrid row. Or alone in a grid or stack row.
            </summary>
            <param name="b"></param>
            <param name="name">Checkbox text.</param>
            <param name="noNewRow"></param>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddText(Au.wpfBuilder,System.String)">
            <summary>
            Adds TextBox that can be used with KCheckBox in a propertygrid row. Or alone in a grid or stack row.
            </summary>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddCheckText(Au.wpfBuilder,System.String,System.String)">
            <summary>
            Adds KCheckBox (<see cref="M:Au.Tools.KExtWpf.xAddCheck(Au.wpfBuilder,System.String,System.Boolean)"/>) and multiline TextBox (<see cref="M:Au.Tools.KExtWpf.xAddText(Au.wpfBuilder,System.String)"/>) in a propertygrid row.
            </summary>
            <param name="b"></param>
            <param name="name">Checkbox text.</param>
            <param name="text">Textbox text.</param>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddCheckTextDropdown(Au.wpfBuilder,System.String,System.String)">
            <summary>
            Adds KCheckBox (<see cref="M:Au.Tools.KExtWpf.xAddCheck(Au.wpfBuilder,System.String,System.Boolean)"/>) and multiline TextBox (<see cref="M:Au.Tools.KExtWpf.xAddText(Au.wpfBuilder,System.String)"/>) in a propertygrid row.
            Also adds ▾ button that shows a drop-down list (see <see cref="M:Au.Tools.KCheckTextBox.Set(System.Boolean,System.String,System.Collections.Generic.List{System.String})"/>).
            Unlike ComboBox, text can be multiline and isn't selected when receives focus.
            </summary>
            <param name="b"></param>
            <param name="name">Checkbox text.</param>
            <param name="text">Textbox text.</param>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddCheckCombo(Au.wpfBuilder,System.String,System.String,System.Int32)">
            <summary>
            Adds KCheckBox (<see cref="M:Au.Tools.KExtWpf.xAddCheck(Au.wpfBuilder,System.String,System.Boolean)"/>) and readonly ComboBox (<see cref="M:Au.Tools.KExtWpf.xAddOther``1(Au.wpfBuilder,``0@,System.String)"/>) in a propertygrid row.
            </summary>
            <param name="b"></param>
            <param name="name">Checkbox text.</param>
            <param name="items">Combobox items like "One|Two".</param>
            <param name="index">Combobox selected index.</param>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddOther``1(Au.wpfBuilder,``0@,System.String)">
            <summary>
            Adds any control that can be used in a propertygrid row.
            </summary>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddButton(Au.wpfBuilder,System.Windows.Controls.Button@,System.String,System.Action{Au.Types.WBButtonClickArgs})">
            <summary>
            Adds button that can be used in a propertygrid row.
            </summary>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddButton(Au.wpfBuilder,System.String,System.Action{Au.Types.WBButtonClickArgs})">
            <summary>
            Adds button that can be used in a propertygrid row.
            </summary>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddCheckAnd``1(Au.wpfBuilder,System.String,``0@,System.String)">
            <summary>
            Adds KCheckBox (<see cref="M:Au.Tools.KExtWpf.xAddCheck(Au.wpfBuilder,System.String,System.Boolean)"/>) and other control (<see cref="M:Au.Tools.KExtWpf.xAddOther``1(Au.wpfBuilder,``0@,System.String)"/>) in a propertygrid row.
            </summary>
            <param name="b"></param>
            <param name="name">Checkbox text.</param>
            <param name="other"></param>
            <param name="text">Other control text.</param>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddInBorder``1(Au.wpfBuilder,``0@,System.String)">
            <summary>
            Adds Border with standard thickness/color and an element in it.
            </summary>
            <param name="b"></param>
            <param name="var"></param>
            <param name="margin"></param>
        </member>
        <member name="M:Au.Tools.KExtWpf.xStartPropertyGrid(Au.wpfBuilder,System.String,System.Boolean)">
            <summary>
            Adds ScrollViewer, adds 2-column grid or vertical stack panel in it (StartGrid, StartStack), and calls <c>Options(modifyPadding: false, margin: new(1))</c>.
            </summary>
        </member>
        <member name="M:Au.Tools.KExtWpf.xEndPropertyGrid(Au.wpfBuilder)">
            <summary>
            Ends grid/stack set by <see cref="M:Au.Tools.KExtWpf.xStartPropertyGrid(Au.wpfBuilder,System.String,System.Boolean)"/> and restores options.
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:Au.Tools.KExtWpf.xSetHeaderProp(Au.wpfBuilder)">
            <summary>
            Sets header control properties: center, bold, dark gray text.
            It can be Label, TextBlock or CheckBox. Not tested others.
            </summary>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddSplitterV(Au.wpfBuilder,System.Int32,System.Double)">
            <summary>
            Adds vertical splitter.
            </summary>
        </member>
        <member name="M:Au.Tools.KExtWpf.xAddSplitterH(Au.wpfBuilder,System.Int32,System.Double)">
            <summary>
            Adds horizontal splitter.
            </summary>
        </member>
    </members>
</doc>
