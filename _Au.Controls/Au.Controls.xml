<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Au.Controls</name>
    </assembly>
    <members>
        <member name="M:Au.Controls.AuDockPanel.ZCreate(System.String,System.String,System.Windows.Forms.Control[])">
            <summary>
            Loads UI layout from XML file and adds controls (panels, toolbars) to this control.
            Adjusts control properties and positions everything according to the XML.
            </summary>
            <param name="xmlFileDefault">XML file containing default panel/toolbar layout.</param>
            <param name="xmlFileCustomized">XML file containing customized panel/toolbar layout. It will be created or updated when saving customizations.</param>
            <param name="controls">Controls. Control Name must match the XML element (panel) name attribute in the XML.</param>
        </member>
        <member name="P:Au.Controls.AuDockPanel._HitTestData.ParentTab">
            <summary>
            If hit test on a tabbed _Panel, returns its parent _Tab, else null.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel._HitTestData.ContentNode">
            <summary>
            If hit test on a _ContentNode, returns it, else null.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._HitTest(System.Windows.Forms.Control,System.Int32,System.Int32,Au.Controls.AuDockPanel._HitTestData@)">
            <summary>
            If hit-test on a splitter, sets ht.gs and returns _HitTestResult.Splitter.
            Else if on a _Panel caption or _Panel tab button, sets gp and returns _HitTestResult.Caption.
            Else (if on a _Tab caption but not a  _Panel tab button) sets gt and returns _HitTestResult.Caption.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.ZGetPanel(System.Windows.Forms.Control)">
            <summary>
            Gets control's host panel interface.
            Returns null if not found.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.ZGetPanel(System.String)">
            <summary>
            Gets panel interface by name.
            Returns null if not found.
            </summary>
            <param name="name">Panel name, which is its control's Name property.</param>
        </member>
        <member name="M:Au.Controls.AuDockPanel.ZAddShowPanelsToMenu(System.Windows.Forms.ToolStripDropDown,System.Boolean,System.Boolean)">
            <summary>
            Adds menu items for all panels or toolbars, except the doc panel, to a menu.
            On menu item click will show that panel.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.ZResetLayoutAfterRestart">
            <summary>
            When disposing this, delete the user's saved layout file. Then next time will use the default file.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.ZEnableDisableAllFloatingWindows(System.Boolean)">
            <summary>
            Call this in main window's WndProc override on WM_ENABLE.
            </summary>
            <param name="enable">Enable or disable.</param>
        </member>
        <member name="P:Au.Controls.AuDockPanel.ZFocusControlOnUndockEtc">
            <summary>
            A control to focus when making a docked panel floating or hidden when it contains focus. Also when Esc pressed in focused floating panel.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel.ZEventArgs">
            <summary>
            Used with many AuDockPanel events and othe callbacks.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.ZEventArgs.#ctor(System.Object)">
            <summary>ctor.</summary>
            <param name="gPanel">Must be _Panel. We use object because C# compiler does not allow to use _Panel (less accessible).</param>
        </member>
        <member name="T:Au.Controls.AuDockPanel.ZEventHandler`1">
            <summary>
            Used with many AuDockPanel events and other callbacks.
            </summary>
        </member>
        <member name="E:Au.Controls.AuDockPanel.ZPanelContextMenu">
            <summary>
            Before showing the context menu when the user right-clicks a panel tab button or caption.
            The event handler can add/remove/etc menu items.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel.ZDockedToolStripRenderer">
            <summary>
            Removes rounded edges of the ToolStrip to which is assigned.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Node">
            <summary>
            Base of _Split, _ContentNode (_Panel and _Tab) and _DummyNode.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel._Node.IsDocked">
            <summary>
            Returns true if is docked in main window or in a floating tab.
            </summary>
            <seealso cref="M:Au.Controls.AuDockPanel._ContentNode.IsDockedOn(System.Windows.Forms.Control)"/>
        </member>
        <member name="T:Au.Controls.AuDockPanel._ContentNode">
            <summary>
            Base of _Panel and _Tab.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._ContentNode.HitTestCaption(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Returns true if x/y is in caption and this is visible and is a child of parent.
            For tabbed _Panel returns true only if x/y is in its tab button, unless there are no visible siblings.
            For _Tab returns true even if on a tab button.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._ContentNode.Show(System.Boolean)">
            <summary>
            Shows in the most recent visible state. Activates tab group panel.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._ContentNode.Hide">
            <summary>
            Hides, does not close.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._ContentNode.DockBy(Au.Controls.AuDockPanel._ContentNode,Au.Controls.AuDockPanel._DockHow)">
            <summary>
            Docks this _Panel or _Tab in an existing or new _Tab or _Split.
            If need, creates new _Tab or _Split in gcTarget place and adds gcTarget and this to it. Else reorders if need.
            This can be a new _Panel, with null ParentSplit and ParentTab, dock state not Docked.
            </summary>
            <param name="gcTarget">New sibling _Panel (side can be any) or sibling _Tab (when side is SplitX) or parent _Tab (when side is TabX).</param>
            <param name="side">Specifies whether to add on a _Tab or _Split, and at which side of gcTarget.</param>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Float">
            <summary>
            Floating parent form of a _Panel.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel._Float.ShowWithoutActivation">
            <summary>
            1. Prevents activating window when showing. 2. Allows to show ToolTip for inactive window.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Float._DockIndicator">
            <summary>
            Calculates and shows transparent rectangles where the floating panel can be docked when dragging it.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Float._DockIndicator._OnFloatMoved(System.Drawing.Point,Au.Types.RECT@,Au.Types.RECT@)">
            <summary>
            Everything is in _manager client area.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Float._DockIndicator._CalcDockRectPart(Au.Types.RECT,System.Drawing.Point)">
            <summary>
            Returns the left, top, right or bottom half of r, depending on where p is in it.
            Sets _target.side.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Float._DockIndicator._CalcNewTabButtonRectInFullCaption(Au.Controls.AuDockPanel._Panel,Au.Types.RECT,System.Drawing.Point)">
            <summary>
            Returns a half of r (gp full caption, not just tab button), depending on where p is (even if not in r).
            Sets _target.side.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Float.DockTarget">
            <summary>
            _Float.Drag() and _DockIndicator.OnFloatDropped() return this if can be docked.
            </summary>
        </member>
        <member name="F:Au.Controls.AuDockPanel._Float.DockTarget.gc">
            <summary>
            The target.
            Note: when dockAsTab is true, it currently may be tabbed or not; if tabbed, may be docked or not.
            </summary>
        </member>
        <member name="F:Au.Controls.AuDockPanel._Float.DockTarget.side">
            <summary>Specifies whether to add on a _Tab or _Split, and at which side of gc.</summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Panel">
            <summary>
            Contains single Control.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Panel.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,System.Xml.Linq.XElement,Au.Controls.AuDockPanel._Tab)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel._Panel.Visible">
            <summary>
            note: this is not just !IsHidden. Returns false if in a hidden tab group even if IsHidden is false.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Panel._IsVisible(System.Boolean)">
            <summary>
            Returns true if this isn't hidden and isn't in a hidden tab group.
            </summary>
            <param name="andContentVisible">And isn't an inactive tab.</param>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Tab">
            <summary>
            Contains multiple _Panel.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,System.Xml.Linq.XElement)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,Au.Controls.AuDockPanel._Panel,Au.Controls.AuDockPanel._Panel)">
            <summary>
            This ctor is used when a floating _Panel dropped on a docked non-tabbed _Panel caption.
            item1 or item2 must be docked, but not both.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab._CalcButtonsBounds(System.Drawing.Graphics)">
            <summary>
            Returns buttons width.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.SetActiveItem(Au.Controls.AuDockPanel._Panel,System.Boolean)">
            <summary>
            Sets ActiveItem, shows its contents, hides previous ActiveItem contents, invalidate caption, calls DockedDocumentPanelActivated event.
            </summary>
            <param name="gp">Can be null to deactivate all.</param>
            <param name="focusControl"></param>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.OnItemRemoved(Au.Controls.AuDockPanel._Panel)">
            <summary>
            Removes a child panel from Items.
            If single item left, moves it to this parent and invalidates/removes this.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.AddOrReorderItem(Au.Controls.AuDockPanel._Panel,Au.Controls.AuDockPanel._Panel,System.Boolean)">
            <summary>
            If gp is child of this, moves it to the place before or after target (a child of this).
            Else just inserts gp there.
            If target is null, adds to the end (does nothing if gp is child).
            Does not update layout.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Split">
            <summary>
            Contains 2 _Node (_Panel, _Tab, _Split or _DummyNode) and a splitter.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,System.Xml.Linq.XElement)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,Au.Controls.AuDockPanel._Node,Au.Controls.AuDockPanel._Node,System.Boolean)">
            <summary>
            This ctor is used when a floating _ContentNode dropped on a docked _ContentNode.
            child1 or child2 must be docked, but not both.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.OnChildRemoved(Au.Controls.AuDockPanel._Node)">
            <summary>
            Puts gn sibling in parent split of this, in place of this.
            Makes this invalid and removes from _aSplit.
            Does not update layout.
            </summary>
            <param name="gn">One of children. The caller is removing it from this.</param>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.ReplaceChild(Au.Controls.AuDockPanel._Node,Au.Controls.AuDockPanel._Node)">
            <summary>
            Replaces child gnOld with gnNew.
            Sets gnNew.ParentSplit = this.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.RepositionChild(Au.Controls.AuDockPanel._Node,System.Boolean,System.Boolean)">
            <summary>
            Changes IsVerticalSplit, Child1 and Child2 if need.
            Does not update layout.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.DragSplitter">
            <summary>
            Called on mouse left button down on splitter.
            Returns when the drag operation ends.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.Paint(System.Drawing.Graphics)">
            <summary>
            Called from AuDockPanel.OnPaint, for its _firstSplit.
            Paints all descendants.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.SetChildFixedSize(Au.Controls.AuDockPanel._Node,System.Boolean)">
            <summary>
            Sets a child to have fixed width or height.
            Used for context menu.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.IsChildFixedSize(Au.Controls.AuDockPanel._Node)">
            <summary>
            Gets whether a child has fixed width or height.
            Used for context menu.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._AccContainer">
            <summary>
            Used by AuDockPanel and _Float.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._AccNode">
            <summary>
            AccessibleObject of _Node.
            We use separate class (don't inherit _Node from AccessibleObject) to avoid _Node cluttering and conflicts (Name, Bounds etc).
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Content">
            <summary>
            The child Control.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Text">
            <summary>
            Panel caption text. Also tab button text.
            If null or not set, uses control's Name property.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.ToolTipText">
            <summary>
            Tooltip text.
            If null or not set, uses Text (default - control's Name property).
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Image">
            <summary>
            Image to display on tab button if it is too small for text.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.IPanel.Init(System.String,System.Drawing.Image,System.Boolean)">
            <summary>
            Sets commonly used properties. Can be used to avoid several function calls (Image, ToolTipText).
            </summary>
            <param name="toolTip">Tooltip text.</param>
            <param name="image">Image to display on tab button if it is too small for text.</param>
            <param name="focusable"></param>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Visible">
            <summary>
            The 'get' function returns true if the panel or its tab button is visible. Returns false if it is hidden or its parent tab group is hidden.
            The 'set' function makes the panel visible, in the most recent state (docked or floating). Activates its tab button if need.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.ReallyVisible">
            <summary>
            Returns true if the panel is visible.
            Returns false if it is hidden or its parent tab group is hidden or it is an inactive tab.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Floating">
            <summary>
            The 'get' function returns true if the panel is floating and not hidden.
            The 'set' function: if true, makes this panel floating and visible if it is currently docked or hidden; if false, makes it docked if it is currently floating and visible.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Focusable">
            <summary>
            Focus the control when eg tab clicked.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.IPanel.Focus">
            <summary>
            Make the panel visible (like <see cref="P:Au.Controls.AuDockPanel.IPanel.Visible"/>) and focus its control.
            </summary>
        </member>
        <member name="T:Au.Controls.IGStripManagerCallbacks">
            <summary>
            <see cref="T:Au.Controls.AuStripManager"/> uses this interface to get properties of menu/toolbar items that it cannot get from XML (Click event handlers, images etc).
            Also used to notify about some events.
            </summary>
        </member>
        <member name="M:Au.Controls.IGStripManagerCallbacks.GetImage(System.String)">
            <summary>
            Gets menu/toolbar item image.
            </summary>
            <param name="imageName">XML i attribute.</param>
        </member>
        <member name="M:Au.Controls.IGStripManagerCallbacks.GetClickHandler(System.String)">
            <summary>
            Gets menu/toolbar item Click event handler.
            Returns null if the item is not a command, for example if it is a submenu-item or control-item.
            Called before creating the ToolStripItem.
            </summary>
            <param name="itemName">Menu/toolbar item name (XML tag).</param>
        </member>
        <member name="M:Au.Controls.IGStripManagerCallbacks.ItemAdding(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip)">
            <summary>
            Called before adding an item to a toolbar or menu/submenu.
            </summary>
            <param name="item">Can be ToolStripMenuItem, ToolStripButton, ToolStripSplitButton, ToolStripDropDownButton, ToolStripSpringTextBox, ToolStripSpringComboBox, ToolStripSeparator. Its Tag property is XElement.</param>
            <param name="owner">ToolStrip, MenuStrip or ToolStripDropDownMenu to which will be added this item. Its Tag property is XElement.</param>
        </member>
        <member name="P:Au.Controls.AuStripManager.MenuBar">
            <summary>
            Menu bar.
            </summary>
        </member>
        <member name="P:Au.Controls.AuStripManager.Toolbars">
            <summary>
            Toolbars.
            </summary>
        </member>
        <member name="P:Au.Controls.AuStripManager.Submenus">
            <summary>
            Submenus.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager.#ctor(System.Windows.Forms.Form,Au.Controls.IGStripManagerCallbacks)">
            <param name="form">Form used as owner of dialog boxes.</param>
            <param name="callbacks"></param>
        </member>
        <member name="M:Au.Controls.AuStripManager.BuildAll(System.String,System.String,System.Windows.Forms.ToolStripRenderer)">
            <summary>
            Opens XML file and creates toolbars/menus/submenus from XML tags.
            </summary>
            <param name="xmlFile">XML file containing menus/toolbars without user customizations.</param>
            <param name="xmlFileCustom">XML file containing user customizations. It will be created or updated when saving customizations.</param>
            <param name="tsRenderer"></param>
        </member>
        <member name="M:Au.Controls.AuStripManager._AddChildItems(System.Xml.Linq.XElement,System.Windows.Forms.ToolStrip,System.Boolean)">
            <summary>
            Adds toolbar buttons or menu bar items.
            Call this for each top-level toolstrip (toolbar or menu bar).
            </summary>
            <param name="xParent">XML element of the toolbar or menu bar.</param>
            <param name="owner">The toolbar or menu bar.</param>
            <param name="isMenu">true if menu, false if toolbar.</param>
        </member>
        <member name="M:Au.Controls.AuStripManager._AddChildItem(System.Xml.Linq.XElement,System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip,System.Int32)">
            <summary>
            Adds item to owner.
            Before it calls <see cref="M:Au.Controls.IGStripManagerCallbacks.ItemAdding(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip)"/>.
            </summary>
            <param name="x">item's element. This function assigns item to its annotation. Caller must assign x to item.Tag before calling this function.</param>
            <param name="item">Can be ToolStripMenuItem, ToolStripButton, ToolStripSplitButton, ToolStripDropDownButton, ToolStripSpringTextBox, ToolStripSpringComboBox, ToolStripSeparator.</param>
            <param name="owner">ToolStrip, MenuStrip or ToolStripDropDownMenu to which to add this item.</param>
            <param name="insertAt">If not negative, inserts at this index. If negative, adds to the end.</param>
        </member>
        <member name="M:Au.Controls.AuStripManager._CreateChildItem(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Creates a menu or toolbar item.
            </summary>
            <param name="x">XML element containing item properties.</param>
            <param name="isMenu">false if toolbar item, true if menu item (also if menu bar item).</param>
        </member>
        <member name="M:Au.Controls.AuStripManager._GetDefaultItemText(System.Xml.Linq.XElement)">
            <summary>
            If x has attribute t, gets its value.
            Else gets its name and converts to text, eg "File_OneTwo" to "One Two".
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager._MergeCustom(System.Xml.Linq.XElement,System.Xml.Linq.XElement@,System.String,System.Boolean)">
            <summary>
            Merges custom attributes into default menubar or toolbar XML.
            Reorders toolbar buttons if need.
            </summary>
            <param name="xCustom">Root element of customizations file.</param>
            <param name="xtsDef">Default menustrip or toolstrip. For custom toolbars the function can replace it.</param>
            <param name="name">xtsDef name, just to avoid getting it again.</param>
            <param name="isMenu"></param>
        </member>
        <member name="M:Au.Controls.AuStripManager._DiffCustom">
            <summary>
            Extracts differences between _xmlFileDefault and _xStrips and saves to _xmlFileCustom.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager._OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Toolbar button MouseUp handler. Implements context menu that allows to customize.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager._Strips_Customize(System.UInt32,System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip,System.Object)">
            <summary>
            Implements toolbar button customization.
            </summary>
            <param name="action">1 copy, 2 move, 3 remove, 4 separator, 5 hide/unhide, 6 properties.</param>
            <param name="item">Button.</param>
            <param name="tsTo">Destination toolbar, or null if don't need.</param>
            <param name="etc">
            With action 2 (move) can be the target button as ToolStripItem; if null, moves to the end.
            With action 6 (properties) - AuStripManagerPropertiesDialog.
            </param>
        </member>
        <member name="M:Au.Controls.AuStripManager._OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Toolbar button MouseDown handler. Implements toolbar button reordering with Alt+drag.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager.Find(System.String)">
            <summary>
            Gets menu items and toolbar buttons that have the specified name (XML tag).
            If not found, returns empty List.
            </summary>
            <param name="name">XML tag.</param>
        </member>
        <member name="F:Au.Controls.FSMProperties.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Au.Controls.FSMProperties.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Au.Controls.FSMProperties.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Au.Controls.AuUserControlBase">
            <summary>
            Can be used as base class for user controls instead of UserControl when you want correct auto-scaling when high DPI (AutoScaleMode.Font).
            </summary>
            <seealso cref="T:Au.Controls.DialogForm"/>
        </member>
        <member name="M:Au.Controls.AuUserControlBase.#ctor">
            
        </member>
        <member name="T:Au.Controls.DialogForm">
            <summary>
            Can be used as base class for forms used as dialogs. Adds WS_POPUP style and Font auto-scaling.
            </summary>
            <remarks>
            Sets these properties: ZIsPopup = true; AutoScaleMode = AutoScaleMode.Font;
            </remarks>
        </member>
        <member name="M:Au.Controls.DialogForm.#ctor">
            
        </member>
        <member name="P:Au.Controls.DialogForm.ZIsPopup">
            <summary>
            Adds WS_POPUP style. Also prevents activating an unrelated window when closing this active owned nonmodal form.
            Set it before creating; later does nothing.
            </summary>
        </member>
        <member name="P:Au.Controls.DialogForm.CreateParams">
            
        </member>
        <member name="M:Au.Controls.DialogForm.OnFormClosed(System.Windows.Forms.FormClosedEventArgs)">
            
        </member>
        <member name="T:Au.Controls.InactiveWindow">
            <summary>
            Form that is used as an inactive popup window.
            </summary>
            <remarks>
            Ctor sets AutoScaleMode=None, StartPosition=Manual, FormBorderStyle=None.
            Hides on mouse middle click.
            </remarks>
        </member>
        <member name="M:Au.Controls.InactiveWindow.ZCalculateAndSetPosition(Au.Types.POINT,Au.Controls.PopupAlignment,System.Drawing.Rectangle,System.Nullable{System.Drawing.Size})">
            <summary>
            Calls API <msdn>CalculatePopupWindowPosition</msdn> and sets <b>Bounds</b>.
            </summary>
        </member>
        <member name="M:Au.Controls.InactiveWindow.ZCalculateAndSetPosition(System.Drawing.Rectangle,Au.Controls.PopupAlignment,System.Nullable{System.Drawing.Size})">
            <summary>
            Calls API <msdn>CalculatePopupWindowPosition</msdn> and sets <b>Bounds</b>.
            The window by default will be at the right or left side of <i>anchorRect</i>. Use <b>PopupAlignment.TPM_VERTICAL</b> if need below or above.
            </summary>
        </member>
        <member name="M:Au.Controls.InactiveWindow.ZShow(System.Windows.Forms.Control)">
            <summary>
            Shows the window.
            </summary>
            <param name="ownerControl">Owner form or control or null.</param>
        </member>
        <member name="E:Au.Controls.InactiveWindow.ZHiddenOrDestroyed">
            <summary>
            When the window is hidden or destroyed.
            The bool parameter is true if destroyed.
            </summary>
        </member>
        <member name="T:Au.Controls.ParamGrid">
            <summary>
            2-column grid control similar to a propertygrid but more flexible.
            Used in many code tools to edit function arguments etc. For example in "Find window or control".
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZAutoSize(System.Boolean,System.Boolean)">
            <summary>
            Call this after adding all rows.
            </summary>
        </member>
        <member name="E:Au.Controls.ParamGrid.ZValueChanged">
            <summary>
            When changed text of a value cell or state of a checkbox cell.
            </summary>
        </member>
        <member name="E:Au.Controls.ParamGrid.ZShowEditInfo">
            <summary>
            When started and ended editing a cell that has info.
            When ended, the string is null.
            </summary>
        </member>
        <member name="T:Au.Controls.ParamGrid.EditCell">
            <summary>
            Simple editable text cell.
            Adds to SG.Cells.Cell: property Info.
            </summary>
        </member>
        <member name="T:Au.Controls.ParamGrid.ComboCell">
            <summary>
            Editable text cell with drop-down button that shows drop-down list similar to combo box.
            </summary>
        </member>
        <member name="F:Au.Controls.ParamGrid._RowType.Editable">
            <summary>Checkbox and editable cell. If check is null, adds lebel instead of checkbox.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid._RowType.Check">
            <summary>Only checkbox.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid._RowType.Header">
            <summary>Only label. If check is not null, adds checkbox instead of label.</summary>
        </member>
        <member name="T:Au.Controls.ParamGrid.EditType">
            <summary>
            Types of the editable cell.
            </summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.Text">
            <summary>Simple editable text.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.ComboText">
            <summary>Editable text with combobox-like drop-down.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.ComboList">
            <summary>Read-only combobox.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.TextButton">
            <summary>Editable text with button.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.Button">
            <summary>Button.</summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZAdd(System.String,System.String,System.Object,System.Nullable{System.Boolean},System.String,System.String,System.Int32,Au.Controls.ParamGrid.EditType,System.EventHandler,System.Int32)">
            <summary>
            Adds row with checkbox (or label) and editable cell.
            Returns row index.
            </summary>
            <param name="key">Row's Tag property. If null, uses <paramref name="name"/>. Used with functions that have <i>rowKey</i> parameter.</param>
            <param name="name">Readonly text in column 0 (checkbox or label).</param>
            <param name="value">
            string.
            For combo can be string like "one|two|three" or string[] or List of string.
            For editable combo also can be Func&lt;string[]&gt; callback that returns items. Called before each dropdown.
            </param>
            <param name="check">Checked or not. If null, adds label instead of checkbox.</param>
            <param name="tt">Tooltip text.</param>
            <param name="info"><see cref="E:Au.Controls.ParamGrid.ZShowEditInfo"/> text.</param>
            <param name="insertAt"></param>
            <param name="etype">Edit cell control type.</param>
            <param name="buttonAction">Button click action when etype is Button, TextButton or ComboList; required if Button/TextButton.</param>
            <param name="comboIndex">If not -1, selects this combo box item.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZAddCheck(System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Adds row with only checkbox (without an editable cell).
            Returns row index.
            </summary>
            <param name="key">Row's Tag property. If null, uses <paramref name="name"/>. Used with functions that have <i>rowKey</i> parameter.</param>
            <param name="name">Checkbox text.</param>
            <param name="check"></param>
            <param name="tt">Tooltip text.</param>
            <param name="insertAt"></param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZAddHeaderRow(System.String,System.Nullable{System.Boolean},System.String,System.Int32,System.String)">
            <summary>
            Adds a header row that can be anywhere (and multiple). It is readonly and spans all columns. Optionally with checkbox.
            Returns row index.
            </summary>
            <param name="name">Read-only text.</param>
            <param name="check">Checked or not. If null, adds label instead of checkbox.</param>
            <param name="tt">Tooltip text.</param>
            <param name="insertAt"></param>
            <param name="key">Row's Tag property. If null, uses <paramref name="name"/>. Used with functions that have <i>rowKey</i> parameter.</param>
        </member>
        <member name="P:Au.Controls.ParamGrid.ZAddHidden">
            <summary>
            If true, ZAdd and similar functions will add hidden rows.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZIsChecked(System.Int32)">
            <summary>
            Returns true if the row is checked or required.
            </summary>
            <param name="row">Row index.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZIsChecked(System.String)">
            <summary>
            Returns true if the row is checked or required.
            </summary>
            <param name="rowKey">Row key.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZCheck(System.Int32,System.Boolean)">
            <summary>
            Checks or unchecks.
            Does nothing if no checkbox.
            </summary>
            <param name="row">Row index.</param>
            <param name="check"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZCheck(System.String,System.Boolean)">
            <summary>
            Checks or unchecks.
            Use only for flags and optionals, not for required.
            </summary>
            <param name="rowKey">Row key.</param>
            <param name="check"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZCheckIfExists(System.String,System.Boolean)">
            <summary>
            Checks or unchecks if rowKey exists.
            Use only for flags and optionals, not for required.
            </summary>
            <param name="rowKey">Row key.</param>
            <param name="check"></param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetValue(System.Int32,System.String@,System.Boolean,System.Boolean)">
            <summary>
            If the row is checked or required, gets its value and returns true.
            </summary>
            <param name="row">Row index.</param>
            <param name="value"></param>
            <param name="falseIfEmpty">Return false if the value is empty (null).</param>
            <param name="falseIfHidden">Return false if the row is hidden.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetValue(System.String,System.String@,System.Boolean,System.Boolean)">
            <summary>
            If the row is checked or required, gets its value and returns true.
            </summary>
            <param name="rowKey">Row key.</param>
            <param name="value"></param>
            <param name="falseIfEmpty">Return false if the value is empty (null).</param>
            <param name="falseIfHidden">Return false if the row is hidden.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetValueIfExists(System.String,System.String@,System.Boolean,System.Boolean)">
            <summary>
            If the row exists and is checked or required, gets its value and returns true.
            </summary>
            <param name="rowKey">Row key. If not found, returns false.</param>
            <param name="value"></param>
            <param name="falseIfEmpty">Return false if the value is empty (null).</param>
            <param name="falseIfHidden">Return false if the row is hidden.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetCellText(System.Int32,System.Int32)">
            <summary>
            Gets cell value or checkbox label.
            </summary>
            <param name="row">Row index. If negative, asserts and returns null.</param>
            <param name="column">Column index.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetCellText(System.String,System.Int32)">
            <summary>
            Gets cell value or checkbox label.
            </summary>
            <param name="rowKey">Row key. If not found, asserts and returns null.</param>
            <param name="column">Column index.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZSetCellText(System.Int32,System.Int32,System.String)">
            <summary>
            Changes cell text or checkbox label. Ends editing.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <param name="text"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZSetCellText(System.String,System.Int32,System.String)">
            <summary>
            Changes cell value or checkbox label. Ends editing.
            </summary>
            <param name="rowKey">Row key.</param>
            <param name="column">Column index.</param>
            <param name="text"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZFindRow(System.String)">
            <summary>
            Finds row by row key and returns row index.
            Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetRowKey(System.Int32)">
            <summary>
            Gets row key.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZClear">
            <summary>
            Removes all rows.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetEditCell(SourceGrid.CellContext@)">
            <summary>
            If editing any cell, gets the cell context and returns true.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZIsEditing(System.Int32,System.Int32,SourceGrid.CellContext@)">
            <summary>
            If editing the specified cell, gets cell context and returns true.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEndEdit(System.Boolean)">
            <summary>
            If editing any cell, ends editing and returns true.
            </summary>
            <param name="cancel">Undo changes.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEndEdit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            If editing the specified cell, ends editing and returns true.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZShowRows(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Hides or unhides one or more rows.
            </summary>
            <param name="visible"></param>
            <param name="from">Index of the first row in the range.</param>
            <param name="count">Count of rows in the range. If -1, until the end.</param>
            <param name="fromOpposite"></param>
            <param name="countOpposite">With fromOpposite specifies range to hide if visible==true or show if visible==false. Faster than calling this function 2 times.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZShowRows(System.Boolean,System.String,System.String)">
            <summary>
            Hides or/and unhides one or more rows and row ranges.
            </summary>
            <param name="visible"></param>
            <param name="rows">Row keys separated by space. Can include ranges separated by -. Example: "one four-nine". If starts or ends with -, the range starts with row 0 or ends with the last row. Example: "three-".</param>
            <param name="rowsOpposite">The same as <paramref name="rows"/>, but the <paramref name="visible"/> parameter has opposite meaning (hide if true, show if false). Faster than calling this function 2 times.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEnableCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Disables or enables cell (can be checkbox).
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEnableCell(System.String,System.Int32,System.Boolean)">
            <summary>
            Disables or enables cell (can be checkbox).
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEnableRow(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Disables or enables row cells.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEnableRow(System.String,System.Boolean,System.Boolean)">
            <summary>
            Disables or enables row cells.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Au.Controls.PopupList.Items">
            <summary>
            List items.
            </summary>
            <remarks>
            Must be set before calling <b>Show</b>.
            Item type can be string or other type. Its <b>ToString</b> is called to get display text. Items can be of different types.
            Item type can implement <see cref="T:Au.Controls.IPopupListItem"/> interface if need checkboxes, colors, etc.
            </remarks>
        </member>
        <member name="P:Au.Controls.PopupList.PopupWindow">
            <summary>
            The top-level popup window.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.MultiShow">
            <summary>
            If false (default), destroys/disposes the popup window when it is hidden. Then next <b>Show</b> would create new window.
            If true, does not destroy. Then next <b>Show</b> reuses the same window. To destroy the window: <c>x.PopupWindow.Close();</c>.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.ClosedAction">
            <summary>
            Called when the popup window hidden.
            If an item selected, the <b>ResultX</b> properties contain selection info, else null/-1/false.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.SelectedAction">
            <summary>
            Called when an item selected.
            The handler can use the <b>ResultX</b> properties to get selection info.
            The popup window is already hidden.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.ResultItem">
            <summary>
            Gets the selected item.
            Call this from <see cref="P:Au.Controls.PopupList.SelectedAction"/> callback.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.ResultIndex">
            <summary>
            Gets the selected index.
            Call this from <see cref="P:Au.Controls.PopupList.SelectedAction"/> callback.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.ResultWasKey">
            <summary>
            True if the selection was made with the keyboard (Enter), false if clicked.
            Call this from <b>OnSelected</b> callback function.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.FixedWidth">
            <summary>
            Don't make the popup list wider than anchor.
            If false, makes wider if strings are long.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.ComboBoxAnimation">
            <summary>
            Show the popup window with roll animation, like combo box.
            Uses default combo box animation time. Ignored if !<see cref="P:System.Windows.Forms.SystemInformation.IsComboBoxAnimationEnabled"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.PopupList.DontCloseWhenAppDeactivated">
            <summary>
            Don't hide the popup window when a window of another program is activated.
            </summary>
        </member>
        <member name="M:Au.Controls.PopupList.Show(System.Windows.Forms.Control)">
            <summary>
            Shows the popup list below or above the anchor control.
            </summary>
            <param name="anchor">Control. Its top-level parent window will own the popup window.</param>
            <exception cref="T:System.ArgumentException">anchor is null or its handle is not created.</exception>
            <exception cref="T:System.InvalidOperationException">Exceptions of <see cref="M:System.Windows.Forms.Form.Show(System.Windows.Forms.IWin32Window)"/>.</exception>
        </member>
        <member name="M:Au.Controls.PopupList.Show(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Shows the popup list below or above the anchor rectangle relative to control.
            </summary>
            <param name="control">Control or form. The top-level window will own the popup window.</param>
            <param name="anchor">Rectangle in control's client area.</param>
            <exception cref="T:System.ArgumentException">control is null or its handle is not created.</exception>
            <exception cref="T:System.InvalidOperationException">Exceptions of <see cref="M:System.Windows.Forms.Form.Show(System.Windows.Forms.IWin32Window)"/>.</exception>
        </member>
        <member name="M:Au.Controls.PopupList.Show(System.Drawing.Rectangle)">
            <summary>
            Shows the popup list below or above the anchor rectangle.
            </summary>
            <param name="anchor">Rectangle in screen.</param>
            <remarks>
            The popup window is top-most.
            </remarks>
        </member>
        <member name="P:Au.Controls.PopupList._Window.ShowWithoutActivation">
            <summary>
            1. Prevents activating window when showing. 2. Allows to show ToolTip for inactive window.
            </summary>
        </member>
        <member name="T:Au.Controls.IPopupListItem">
            <summary>
            Can be used for <see cref="P:Au.Controls.PopupList.Items"/> when need row colors, icon, checkbox, tooltip, etc.
            </summary>
            <remarks>
            Most of properties in this interface have only 'get' function, but your class that implement it also can add 'set' functions. Example: <c>public bool Disabled { get; set; }</c>. Only the <b>Checked</b> property has 'set' function, and the popup list calls it when the user changes checkbox state.
            </remarks>
        </member>
        <member name="P:Au.Controls.IPopupListItem.TooltipText">
            <summary>
            Balloon tooltip text.
            </summary>
        </member>
        <member name="P:Au.Controls.IPopupListItem.Icon">
            <summary>
            Row icon.
            </summary>
        </member>
        <member name="P:Au.Controls.IPopupListItem.BackColor">
            <summary>
            Row background color.
            </summary>
        </member>
        <member name="P:Au.Controls.IPopupListItem.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Au.Controls.IPopupListItem.CheckType">
            <summary>
            Adds checkbox.
            If <b>Row</b>, the row is used to toggle checkbox and not to select the item.
            If <b>Box</b>, the row is used to toggle checkbox or select the item, depending where you click.
            In any case the checkbox also can be toggled with the Space key.
            </summary>
        </member>
        <member name="P:Au.Controls.IPopupListItem.Checked">
            <summary>
            The checkbox is checked.
            Changed when the user changes checkbox state.
            </summary>
        </member>
        <member name="P:Au.Controls.IPopupListItem.Disabled">
            <summary>
            The user cannot select, check or uncheck the row.
            Also its text is gray, unless is used <see cref="P:Au.Controls.IPopupListItem.TextColor"/> or <see cref="P:Au.Controls.IPopupListItem.BackColor"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.IPopupListItem.BoldFont">
            <summary>
            Draw item text using bold font.
            </summary>
        </member>
        <member name="P:Au.Controls.IPopupListItem.Group">
            <summary>
            Checkbox group id.
            If not 0, when the user makes the checkbox checked, other items that have the same group id are automatically unchecked.
            If negative, the user cannot uncheck the checked item.
            </summary>
        </member>
        <member name="T:Au.Controls.PLCheckType">
            <summary>
            <see cref="P:Au.Controls.IPopupListItem.CheckType"/>
            </summary>
        </member>
        <member name="F:Au.Controls.PLCheckType.None">
            <summary>
            No checkbox.
            </summary>
        </member>
        <member name="F:Au.Controls.PLCheckType.Row">
            <summary>
            The row is used to toggle checkbox and not to select the item.
            </summary>
        </member>
        <member name="F:Au.Controls.PLCheckType.Box">
            <summary>
            The row is used to toggle checkbox or select the item, depending where you click.
            </summary>
        </member>
        <member name="T:Au.Controls.AuButton">
            <summary>
            Button without owner-draw style which disables theme animation.
            </summary>
        </member>
        <member name="T:Au.Controls.AuCheckBox">
            <summary>
            CheckBox without owner-draw style which disables theme animation and draws 1 pixel above normal.
            </summary>
        </member>
        <member name="T:Au.Controls.AuRadioButton">
            <summary>
            RadioButton without owner-draw style which disables theme animation.
            </summary>
        </member>
        <member name="T:Au.Controls.AuButtonOK">
            <summary>
            Button that automatically sets its Text = "OK", DialogResult = DialogResult.OK and form's AcceptButton.
            </summary>
        </member>
        <member name="T:Au.Controls.AuButtonCancel">
            <summary>
            Button that automatically sets its Text = "Cancel", DialogResult = DialogResult.Cancel and form's CancelButton.
            </summary>
        </member>
        <member name="T:Au.Controls.AuLabel">
            <summary>
            Makes Padding.Top = 2, to align text with adjacent TextBox and other controls.
            </summary>
        </member>
        <member name="T:Au.Controls.AuSplitContainer">
            <summary>
            Auto-scales SplitterDistance depending on DPI.
            </summary>
        </member>
        <member name="T:Au.Controls.AuScintilla">
            <summary>
            This .NET control wraps native Scintilla control.
            This is not a universal Scintilla wrapper class. Designed just for purposes of this library and related software.
            Responsible for creating and initializing the control. Also used to set/change control properties.
            The Z property returns a SciText object that can be used to work with text, code styling etc.
            </summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.Z">
            <summary>
            Gets the SciText object that contains most Scintilla-related functions.
            </summary>
        </member>
        <member name="M:Au.Controls.AuScintilla.#ctor">
            
        </member>
        <member name="M:Au.Controls.AuScintilla.ZOnSciNotify(Au.Controls.Sci.SCNotification@)">
            <summary>
            Raises the <see cref="E:Au.Controls.AuScintilla.ZNotify"/> event.
            </summary>
        </member>
        <member name="E:Au.Controls.AuScintilla.ZNotify">
            <summary>
            Occurs when any Scintilla notification is received.
            </summary>
        </member>
        <member name="E:Au.Controls.AuScintilla.ZTextChanged">
            <summary>
            Occurs when text changed.
            </summary>
        </member>
        <member name="M:Au.Controls.AuScintilla.Call(System.Int32,Au.Types.LPARAM,Au.Types.LPARAM)">
            <summary>
            Sends a Scintilla message to the control and returns int.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.AuScintilla.CallRetPtr(System.Int32,Au.Types.LPARAM,Au.Types.LPARAM)">
            <summary>
            Sends a Scintilla message to the control and returns LPARAM.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.Text">
            <summary>
            Gets or sets text.
            Uses caching, therefore the 'get' function is fast and garbage-free when calling multiple times.
            </summary>
            <remarks>
            The 'get' function gets cached text if called not the first time after setting or modifying control text.
            The 'set' function calls <see cref="M:Au.Controls.SciText.SetText(System.String,Au.Controls.SciSetTextFlags,System.Boolean)"/> when need. Uses default parameters (with undo and notifications, unless ZInitReadOnlyAlways).
            Unlike the above methods, this property can be used before creating handle.
            </remarks>
        </member>
        <member name="P:Au.Controls.AuScintilla.Len8">
            <summary>
            UTF-8 text length.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.Len16">
            <summary>
            UTF-16 text length.
            </summary>
        </member>
        <member name="M:Au.Controls.AuScintilla.Pos8(System.Int32)">
            <summary>
            Converts UTF-16 position to UTF-8 position. Fast.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative or greater than <see cref="P:Au.Controls.AuScintilla.Len16"/>.</exception>
        </member>
        <member name="M:Au.Controls.AuScintilla.Pos16(System.Int32)">
            <summary>
            Converts UTF-8 position to UTF-16 position. Fast.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative or greater than <see cref="P:Au.Controls.AuScintilla.Len8"/>.</exception>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZInitBorderStyle">
            <summary>
            Border style.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZInitUseDefaultContextMenu">
            <summary>
            Use the default Scintilla's context menu.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZInitReadOnlyAlways">
            <summary>
            This control is used just to display text, not to edit.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="T:Au.Controls.AuScintilla.ZImagesStyle">
            <summary>
            See <see cref="P:Au.Controls.AuScintilla.ZInitImagesStyle"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ZImagesStyle.NoImages">
            <summary>Don't show images. The <see cref="P:Au.Controls.AuScintilla.ZImages"/> property is null.</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ZImagesStyle.ImageTag">
            <summary>Display only images specified in tags like &lt;image "image file path"&gt;, including icons of non-image file types.</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ZImagesStyle.AnyString">
            <summary>Display images specified in any string like "image file path", and only of image file types. Then limits image height to 10 lines.</summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZInitImagesStyle">
            <summary>
            Whether and how to show images.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="T:Au.Controls.AuScintilla.ZTagsStyle">
            <summary>
            See <see cref="P:Au.Controls.AuScintilla.ZInitImagesStyle"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ZTagsStyle.NoTags">
            <summary>Don't support tags. The <see cref="P:Au.Controls.AuScintilla.ZTags"/> property is null.</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ZTagsStyle.AutoWithPrefix">
            <summary>Let <see cref="P:Au.Controls.AuScintilla.Text"/>, Z.SetText and Z.AppendText parse tags when the text has prefix "&lt;&gt;".</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ZTagsStyle.AutoAlways">
            <summary>Let <see cref="P:Au.Controls.AuScintilla.Text"/>, Z.SetText and Z.AppendText parse tags always.</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ZTagsStyle.User">
            <summary>Tags are parsed only when calling Tags.AddText.</summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZInitTagsStyle">
            <summary>
            Whether and when supports tags.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZInitWrapVisuals">
            <summary>
            Whether to show arrows etc to make wrapped lines more visible.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZWrapLines">
            <summary>
            Word-wrap.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZAcceptsReturn">
            <summary>
            Like <see cref="P:System.Windows.Forms.TextBox.AcceptsReturn"/>.
            If null (default), does not accept if <see cref="P:Au.Controls.AuScintilla.ZInitReadOnlyAlways"/> is true.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZDisableModifiedNotifications">
            <summary>
            On SCN_MODIFIED notifications suppress <see cref="M:Au.Controls.AuScintilla.ZOnSciNotify(Au.Controls.Sci.SCNotification@)"/>, <see cref="E:Au.Controls.AuScintilla.ZNotify"/> and <see cref="E:Au.Controls.AuScintilla.ZTextChanged"/>.
            Use to temporarily disable 'modified' notifications. Never use SCI_SETMODEVENTMASK, because then the control would stop working correctly.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZNoMouseLeftSetFocus">
            <summary>
            Don't set focus on mouse left button down.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ZNoMouseRightSetFocus">
            <summary>
            Don't set focus on mouse right button down.
            </summary>
        </member>
        <member name="T:Au.Controls.InfoBox">
            <summary>
            Scintilla-based control to show formatted information text.
            To set text use the <see cref="P:Au.Controls.AuScintilla.Text"/> property. For formatting and links use tags: <see cref="T:Au.Controls.SciTags"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoBox.ZInitUseControlFont">
            <summary>
            Use control's <b>Font</b> instead of the default font Verdana 8.
            </summary>
        </member>
        <member name="T:Au.Controls.InfoWindow">
            <summary>
            An info window, similar to tooltips but persistent, normally at the right side of a form/control/rectangle.
            Supports output tags etc. Actually it is a floating <see cref="T:Au.Controls.InfoBox"/>.
            You can set text, resize and show/hide/dispose it many times.
            User can middle-click to hide.
            </summary>
        </member>
        <member name="M:Au.Controls.InfoWindow.#ctor(System.Int32)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="twoControlsSplitPos">If not 0 (default), creates second <see cref="T:Au.Controls.InfoBox"/> control at this horizontal offset.</param>
        </member>
        <member name="P:Au.Controls.InfoWindow.Window">
            <summary>
            The top-level info window. Contains <see cref="P:Au.Controls.InfoWindow.Control1"/>.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoWindow.Control1">
            <summary>
            The child control of <see cref="P:Au.Controls.InfoWindow.Window"/>. Displays text.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoWindow.Control2">
            <summary>
            The second child control of <see cref="P:Au.Controls.InfoWindow.Window"/>. Displays text.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoWindow.Text">
            <summary>
            Text with output tags.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoWindow.Text2">
            <summary>
            Text of second control with output tags.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoWindow.Size">
            <summary>
            Window size.
            Default: (300, 200) dpi-scaled.
            </summary>
            <remarks>
            If visible, does not ensure correct position. Usually it's better to hide, set size and show again.
            </remarks>
        </member>
        <member name="M:Au.Controls.InfoWindow.Show(System.Windows.Forms.Control,Au.Controls.PopupAlignment,System.Nullable{Au.Types.POINT})">
            <summary>
            Shows the info window by the control.
            </summary>
            <param name="c">Control. Its top-level parent window will own the info window.</param>
            <param name="align"></param>
            <param name="anchor"></param>
            <exception cref="T:System.ArgumentException">c is null or its handle is not created.</exception>
            <exception cref="T:System.InvalidOperationException">Exceptions of <see cref="M:System.Windows.Forms.Form.Show(System.Windows.Forms.IWin32Window)"/>.</exception>
        </member>
        <member name="M:Au.Controls.InfoWindow.Show(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Boolean,Au.Controls.PopupAlignment,System.Nullable{Au.Types.POINT})">
            <summary>
            Shows the info window by the control and rectangle.
            </summary>
            <param name="c">Control or form. The top-level window will own the info window.</param>
            <param name="r">Rectangle in control's client area or in screen.</param>
            <param name="screenRect">r is in screen.</param>
            <param name="align"></param>
            <param name="anchor"></param>
            <exception cref="T:System.ArgumentException">c is null or its handle is not created.</exception>
            <exception cref="T:System.InvalidOperationException">Exceptions of <see cref="M:System.Windows.Forms.Form.Show(System.Windows.Forms.IWin32Window)"/>.</exception>
        </member>
        <member name="M:Au.Controls.InfoWindow.Show(System.Drawing.Rectangle,Au.Controls.PopupAlignment,System.Nullable{Au.Types.POINT})">
            <summary>
            Shows the info window by the rectangle.
            </summary>
            <param name="r">Rectangle in screen.</param>
            <param name="align"></param>
            <param name="anchor"></param>
            <remarks>
            The info window is top-most.
            </remarks>
        </member>
        <member name="M:Au.Controls.InfoWindow.Hide">
            <summary>
            Hides the info window.
            Does not dispose.
            </summary>
        </member>
        <member name="M:Au.Controls.InfoWindow.Dispose">
            <summary>
            Destroys the info window.
            Later can be shown again.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoWindow.Caption">
            <summary>
            If set to a non-null string before creating the info window, the window will be with caption and resizable.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoWindow.InsertInControl">
            <summary>
            A text control in which to insert the link text when clicked.
            If null, uses the focused control.
            </summary>
        </member>
        <member name="P:Au.Controls.InfoWindow.UserClosed">
            <summary>
            true if hidden when the user clicked the x button.
            </summary>
        </member>
        <member name="M:Au.Controls.InfoWindow.OnLoad(System.EventArgs)">
            <summary>
            Called when window loaded but still invisible.
            InfoWindow.OnLoad does nothing. This function is just for overriding.
            </summary>
        </member>
        <member name="M:Au.Controls.Sci.Sci_GetStylingInfo(Au.Types.LPARAM,System.Int32,Au.Controls.Sci.Sci_StylingInfo@)">
            <summary>
            flags: 1 endStyled, 2 endStyledLine, endStyledLineStart, 4 visibleFrom, visibleFromLine, 8 visibleTo, visibleToLine
            </summary>
        </member>
        <member name="P:Au.Controls.Sci.SCNotification.Text">
            <summary>
            Converts textUTF8 to C# string.
            Returns null if textUTF8 is null.
            Don't call this property multiple times for the same notification. Store the return value in a variable and use it.
            </summary>
        </member>
        <member name="P:Au.Controls.Sci.SCNotification.FinalPosition">
            <summary>
            Returns position, UTF-8. If SCN_MODIFIED(SC_MOD_INSERTTEXT|SC_MOD_BEFOREINSERT|SC_MOD_INSERTCHECK), adds length, because position then is old position.
            </summary>
        </member>
        <member name="T:Au.Controls.SciImages">
            <summary>
            Gets image file paths etc from <see cref="T:Au.Controls.AuScintilla"/> control text and displays the images below that lines.
            </summary>
            <remarks>
            Draws images in annotation areas.
            Supports text annotations too, below images and in no-image lines. But it is limited:
            1. To set/get it use <see cref="M:Au.Controls.SciText.AnnotationText(System.Int32,System.String)"/>, not direct Scintilla API.
            2. You cannot hide all annotations (SCI_ANNOTATIONSETVISIBLE). This class sets it to show always.
            3. You cannot clear all annotations (SCI_ANNOTATIONCLEARALL).
            4. Setting annotation styles is currently not supported.
            </remarks>
        </member>
        <member name="M:Au.Controls.SciImages._ThreadSharedData.CompactCache">
            <summary>
            If cache is large (at least MaxCacheSize and 4 images), removes about 3/4 of older cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages.#ctor(Au.Controls.AuScintilla,System.Boolean)">
            <summary>
            Prepares this variable and the Scintilla control to display images.
            Calls SCI_ANNOTATIONSETVISIBLE(ANNOTATION_STANDARD). Need it because will draw images in annotation areas.
            </summary>
            <param name="c">The control.</param>
            <param name="isEditor">Display images that are not in "&lt;image "path etc"&gt; tag. Then does not display icons of files that don't contain images. Then limits image height to 10 lines.</param>
        </member>
        <member name="M:Au.Controls.SciImages.ClearCache">
            <summary>
            Removes all cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages.CompactCache">
            <summary>
            If cache is large (at least MaxCacheSize and 4 images), removes about 3/4 of older cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="P:Au.Controls.SciImages.MaxCacheSize">
            <summary>
            Maximal size of the image cache.
            Default 4 MB.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages._SetImagesForTextRange(System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets image annotations for one or more lines of text.
            </summary>
            <param name="firstLine">First line index.</param>
            <param name="text">Text that starts at line firstLine.</param>
            <param name="length">Text length.</param>
            <param name="allText">Added all text (not edited or appended).</param>
            <param name="textPos">Position where the text starts.</param>
        </member>
        <member name="M:Au.Controls.SciImages._ParseAnnotText(System.Byte*,System.Int32,System.Int32@)">
            <summary>
            Parses annotation text.
            If it starts with image info string ("\x3NNN\n\n..."), returns its length. Else returns 0.
            </summary>
            <param name="s">Annotation text. Can start with image info string or not.</param>
            <param name="length">s length.</param>
            <param name="imageInfo">The NNN part of image info, or 0.</param>
        </member>
        <member name="M:Au.Controls.SciImages.AnnotationText_(System.Int32,System.String)">
            <summary>
            Sets annotation text, preserving existing image info.
            </summary>
            <param name="line"></param>
            <param name="s">New text without image info.</param>
        </member>
        <member name="M:Au.Controls.SciImages.AnnotationText_(System.Int32)">
            <summary>
            Gets annotation text without image info.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages._GetTextRange(System.Int32,System.Int32)">
            <summary>
            Copies text range to BufferForText.
            If cannot get from-to length text, asserts and returns null.
            Does not validate arguments.
            </summary>
        </member>
        <member name="P:Au.Controls.SciImages.Visible">
            <summary>
            Hides/shows all images, or changes the display style of annotation areas.
            Default is ANNOTATION_STANDARD (images visible).
            When hiding, it just removes images, does not hide text annotations (SCI_ANNOTATIONGETVISIBLE remains unchanged).
            </summary>
        </member>
        <member name="T:Au.Controls.SciText">
            <summary>
            Functions to work with Scintilla control text, code, etc.
            A SciText object is created by AuScintilla which is the C property.
            </summary>
            <remarks>
            Most functions throw ArgumentOutOfRangeException when: 1. A position or line index argument is negative. 2. Scintilla returned a negative position or line index.
            If a position or line index argument is greater than text length or the number of lines, some functions return the text length or the last line, and it is documented; for other functions the behaviour is undefined, eg ArgumentOutOfRangeException or Scintilla's return value or like of the documented methods.
            
            Some frequently used functions are in <see cref="T:Au.Controls.AuScintilla"/>, not here, eg to get/set all text or to get/convert UTF-8/16 text length/position.
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.StyleFont(System.Int32,System.Drawing.Font)">
            <remarks>Uses only font name and size. Not style etc.</remarks>
        </member>
        <member name="M:Au.Controls.SciText.StyleMeasureStringWidth(System.Int32,System.String)">
            <summary>
            Measures string width.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.StyleClearAll">
            <summary>
            Calls SCI_STYLECLEARALL, which sets all styles to be the same as STYLE_DEFAULT.
            Then also sets some special styles, eg STYLE_HIDDEN and hotspot color.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.StyleClearRange(System.Int32,System.Int32)">
            <summary>
            Calls SCI_STYLECLEARALL(styleFrom, styleToNotIncluding), which sets range of styles to be the same as STYLE_DEFAULT.
            If styleToNotIncluding is 0, clears all starting from styleFrom.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.GetStyleAt(System.Int32)">
            <summary>
            Gets style at position.
            Uses SCI_GETSTYLEAT.
            Returns 0 if pos is invalid.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.C">
            <summary>
            The host AuScintilla control.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.CallRetPtr(System.Int32,Au.Types.LPARAM,Au.Types.LPARAM)">
            <summary>
            Sends a Scintilla message to the control and returns LPARAM.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.Call(System.Int32,Au.Types.LPARAM,Au.Types.LPARAM)">
            <summary>
            Sends a Scintilla message to the control and returns int.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.SetString(System.Int32,Au.Types.LPARAM,System.String,System.Boolean)">
            <summary>
            Calls a Scintilla message that sets a string which is passed using lParam.
            The string can be null if the Scintilla message allows it.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.SetString(System.Int32,System.String,Au.Types.LPARAM)">
            <summary>
            Calls a Scintilla message that sets a string which is passed using wParam.
            The string can be null if the Scintilla message allows it.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.SetStringString(System.Int32,System.String)">
            <summary>
            Calls a Scintilla message and passes two strings using wParam and lParam.
            wParam0lParam must be like "WPARAM\0LPARAM". Asserts if no '\0'.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.GetString(System.Int32,Au.Types.LPARAM,System.Int32)">
            <summary>
            Calls a Scintilla message that gets a string.
            Don't call this function from another thread.
            </summary>
            <param name="sciMessage"></param>
            <param name="wParam"></param>
            <param name="bufferSize">
            How much UTF-8 bytes to allocate for Scintilla to store the text.
            If -1 (default), at first calls sciMessage with lParam=0 (null buffer), let it return required buffer size. Then it can get binary string (with '\0' characters).
            If 0, returns "" and does not call the message.
            If positive, it can be either known or max expected text length, without the terminating '\0' character. The function will find length of the retrieved string (finds '\0'). Then it cannot get binary string (with '\0' characters).
            The function allocates bufferSize+1 bytes and sets that last byte = 0. If Scintilla overwrites it, asserts and calls Environment.FailFast.
            </param>
        </member>
        <member name="M:Au.Controls.SciText.GetStringOfLength(System.Int32,Au.Types.LPARAM,System.Int32)">
            <summary>
            The same as <see cref="M:Au.Controls.SciText.GetString(System.Int32,Au.Types.LPARAM,System.Int32)"/>, but always uses utf8Length bytes of the result (does not find length).
            </summary>
            <param name="sciMessage"></param>
            <param name="wParam"></param>
            <param name="utf8Length">
            Known length (bytes) of the result UTF-8 string, without the terminating '\0' character.
            If 0, returns "" and does not call the message.
            </param>
            <remarks>
            This function can get binary string (with '\0' characters).
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText._RangeText(System.Int32,System.Int32)">
            <summary>
            Optimized 'get text' function.
            </summary>
            <param name="start8">Start index, UTF-8.</param>
            <param name="end8">End index, UTF-8.</param>
            <remarks>
            Does not create an intermediate byte[].
            Gets big text 5 times faster than GetStringOfLength. Tested with text 31K length, 1K lines.
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.NormalizeRange(System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            If <i>utf16</i>, converts <i>from</i> and <i>to</i> from characters to UTF-8 bytes.
            </summary>
            <param name="utf16">Input values are UTF-16.</param>
            <param name="from"></param>
            <param name="to">If -1, uses <see cref="P:Au.Controls.AuScintilla.Len8"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid argument, eg greater than text length or <i>to</i> less than <i>from</i>.</exception>
        </member>
        <member name="M:Au.Controls.SciText.NormalizeRange(System.Boolean,System.Range)">
            <summary>
            If <i>utf16</i>, converts <i>from</i> and <i>to</i> from characters to UTF-8 bytes.
            </summary>
            <param name="utf16">Input values are UTF-16.</param>
            <param name="r">Range. Can be spacified from start or/and from end.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid argument, eg <i>to</i> less than <i>from</i>.</exception>
        </member>
        <member name="M:Au.Controls.SciText.NormalizeRangeCanBeReverse(System.Boolean,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Same as <see cref="M:Au.Controls.SciText.NormalizeRange(System.Boolean,System.Int32@,System.Int32@)"/>, but can be <i>to</i> less than <i>from</i>. If so, returns true.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid argument, eg greater than text length.</exception>
        </member>
        <member name="M:Au.Controls.SciText._ParamPos(System.Boolean,System.Int32)">
            <summary>
            => utf16 ? C.Pos8(pos) : pos;
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative.</exception>
        </member>
        <member name="M:Au.Controls.SciText._ReturnPos(System.Boolean,System.Int32)">
            <summary>
            => utf16 ? C.Pos16(pos) : pos;
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative.</exception>
        </member>
        <member name="M:Au.Controls.SciText._ReturnPosCanBeNegative(System.Boolean,System.Int32)">
            <summary>
            pos >= 0 ? (utf16 ? C.Pos16(pos) : pos) : pos;
            </summary>
        </member>
        <member name="M:Au.Controls.SciText._ParamLine(System.Int32)">
            <summary>
            => line;
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Negative.</exception>
        </member>
        <member name="M:Au.Controls.SciText.ClearText(Au.Controls.SciSetTextFlags)">
            <summary>
            Removes all text (SCI_CLEARALL).
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:Au.Controls.SciText.SetText(System.String,Au.Controls.SciSetTextFlags,System.Boolean)">
            <summary>
            Replaces all text.
            Parses tags if need.
            </summary>
            <param name="s">Text.</param>
            <param name="flags"></param>
            <param name="ignoreTags">Don't parse tags, regardless of C.ZInitTagsStyle.</param>
        </member>
        <member name="M:Au.Controls.SciText.SetText_(System.Byte[],System.Int32)">
            <summary>
            Sets UTF-8 text.
            </summary>
            <remarks>
            Does not parse tags etc, just calls SCI_SETTEXT and SCI_SETREADONLY if need.
            s must end with 0. Asserts.
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.SetText_(System.Byte*)">
            <summary>
            Sets UTF-8 text.
            Does not pare tags etc, just calls SCI_SETTEXT and SCI_SETREADONLY if need.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.AppendText(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Appends text and optionally "\r\n".
            Parses tags if need. Optionally scrolls and moves current position to the end (SCI_GOTOPOS).
            </summary>
            <param name="s"></param>
            <param name="andRN">Also append "\r\n". Ignored if parses tags; then appends.</param>
            <param name="scroll">Move current position and scroll to the end. Ignored if parses tags; then moves/scrolls.</param>
            <param name="ignoreTags">Don't parse tags, regardless of C.ZInitTagsStyle.</param>
        </member>
        <member name="M:Au.Controls.SciText.AddText_(System.Boolean,System.Byte*,System.Int32)">
            <summary>
            Sets or appends UTF-8 text of specified length.
            Does not parse tags. Moves current position and scrolls to the end.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.GetText_">
            <summary>
            Gets all text directly from Scintilla.
            Does not use caching like AuScintilla.Text.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.CurrentPos8">
            <summary>
            Gets (SCI_GETCURRENTPOS) or sets (SCI_SETEMPTYSELECTION) current caret position in UTF-8 bytes.
            The 'set' function makes empty selection; does not scroll and does not make visible like GoToPos.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.CurrentPos16">
            <summary>
            Gets (SCI_GETCURRENTPOS) or sets (SCI_SETEMPTYSELECTION) current caret position in UTF-16 chars.
            The 'set' function makes empty selection; does not scroll and does not make visible like GoToPos.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.SelectionStart8">
            <summary>
            SCI_GETSELECTIONSTART UTF-8.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.SelectionStar16">
            <summary>
            SCI_GETSELECTIONSTART UTF-16.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.SelectionEnd8">
            <summary>
            SCI_GETSELECTIONEND UTF-8.
            Always greater or equal than SelectionStart.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.SelectionEnd16">
            <summary>
            SCI_GETSELECTIONEND UTF-16.
            Always greater or equal than SelectionStartChars.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.IsSelection">
            <summary>
            true if there is selected text.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.LineFromPos(System.Boolean,System.Int32)">
            <summary>
            Gets line index from character position.
            </summary>
            <param name="utf16"></param>
            <param name="pos">A position in document text. Returns the last line if too big.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineStart(System.Boolean,System.Int32)">
            <summary>
            Gets line start position from line index.
            </summary>
            <param name="utf16">Return UTF-16.</param>
            <param name="line">0-based line index. Returns text length if too big.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineEnd(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Gets line end position from line index.
            </summary>
            <param name="utf16">Return UTF-16.</param>
            <param name="line">0-based line index. Returns text length if too big.</param>
            <param name="withRN">Include \r\n.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineStartFromPos(System.Boolean,System.Int32)">
            <summary>
            Gets line start position from any position.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="pos">A position in document text. Returns text length if too big.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineStartFromPos(System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Gets line start position from any position and gets line index.
            Returns start position.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="pos">A position in document text. Returns text length if too big.</param>
            <param name="line">Receives line index.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineEndFromPos(System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets line end position from any position.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="pos">A position in document text. Returns text length if too big.</param>
            <param name="withRN">Include \r\n.</param>
            <param name="lineStartIsLineEnd">If pos is at a line start (0 or after '\n' character), return pos.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineStartEndFromPos(System.Boolean,System.Int32,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Gets line index, start and end positions from position.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="pos">A position in document text. Uses the last line if too big.</param>
            <param name="withRN">Include \r\n.</param>
            <param name="utf16Return">If not null, overrides <i>utf16</i> for return values.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineText(System.Int32,System.Boolean)">
            <summary>
            Gets line text.
            </summary>
            <param name="line">0-based line index. If invalid, returns "".</param>
            <param name="withRN">Include \r\n.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineHeight">
            <summary>
            Gets line height.
            Currently all lines are of the same height.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.LineCount">
            <summary>
            Gets the number of lines.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.LineIndentationFromPos(System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Gets the number of tabs + spaces/4 at the start of the line that contains the specified position.
            </summary>
            <param name="utf16"></param>
            <param name="pos">A position in document text.</param>
            <param name="extraSpaces">Receives the number of extra spaces, 0 to 3.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineIndentationFromPos(System.Boolean,System.Int32)">
            <summary>
            Gets the number of tabs + spaces/4 at the start of the line that contains the specified position.
            </summary>
            <param name="utf16"></param>
            <param name="pos">A position in document text.</param>
        </member>
        <member name="M:Au.Controls.SciText.PosFromXY(System.Boolean,Au.Types.POINT,System.Boolean)">
            <summary>
            Gets position from point.
            </summary>
            <param name="utf16">Return UTF-16.</param>
            <param name="p">Point in client area.</param>
            <param name="minusOneIfFar">Return -1 if p is not in text characters.</param>
        </member>
        <member name="M:Au.Controls.SciText.AnnotationText(System.Int32)">
            <summary>
            Gets annotation text of line.
            Returns "" if the line does not contain annotation or is invalid line index.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.AnnotationText_(System.Int32)">
            <summary>
            Gets raw annotation text which can contain image info.
            AnnotationText gets text without image info.
            Returns "" if the line does not contain annotation or is invalid line index.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.AnnotationText(System.Int32,System.String)">
            <summary>
            Sets annotation text of line.
            Does nothing if invalid line index.
            If s is null or "", removes annotation.
            Preserves existing image info.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.AnnotationText_(System.Int32,System.String)">
            <summary>
            Sets raw annotation text which can contain image info.
            If s is null or "", removes annotation.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.RangeToFullLines(System.Boolean,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Moves <i>from</i> to the start of its line, and <i>to</i> to the end of its line.
            Does not change <i>to</i> if it is at a line start.
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index.</param>
            <param name="withRN">Include "\r\n".</param>
        </member>
        <member name="M:Au.Controls.SciText.InsertText(System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            SCI_INSERTTEXT.
            </summary>
            <param name="utf16"></param>
            <param name="pos">Start index. Cannot be negative.</param>
            <param name="s">Text to insert. Can be null.</param>
            <param name="addUndoPoint">Call <see cref="M:Au.Controls.SciText.AddUndoPoint"/>.</param>
            <remarks>
            Does not parse tags.
            Does not change current selection, unless <i>pos</i> is in it; for it use <see cref="M:Au.Controls.SciText.ReplaceSel(System.String)"/> or <see cref="M:Au.Controls.SciText.ReplaceRange(System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.DeleteRange(System.Boolean,System.Int32,System.Int32)">
            <summary>
            SCI_DELETERANGE.
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index. If -1, uses control text length.</param>
            <remarks>
            Does not parse tags.
            Does not change current selection, unless it is in the range (including <i>to</i>); for it use <see cref="M:Au.Controls.SciText.ReplaceSel(System.String)"/> or <see cref="M:Au.Controls.SciText.ReplaceRange(System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.ReplaceRange(System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Replaces text range.
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index. If -1, uses control text length. Can be less than <i>from</i>.</param>
            <param name="s">Replacement text. Can be null.</param>
            <param name="moveCurrentPos">
            After replacing set curent position at the end of the replacement. If <i>from</i> less than to - at <i>from</i>.
            Else if current position was in the range (including <i>to</i>), Scintilla sets at <i>from</i>.
            Else does not change current position and selection.
            </param>
            <remarks>
            Does not parse tags.
            By default does not change current selection, unless it is in the range (including <i>to</i>).
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.RangeText(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets range text.
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index. If -1, uses control text length.</param>
        </member>
        <member name="M:Au.Controls.SciText.ReplaceSel(System.String)">
            <summary>
            SCI_REPLACESEL.
            </summary>
            <param name="s">Replacement text. Can be null.</param>
            <remarks>
            Does not parse tags.
            If read-only, asserts and fails (unlike most other functions that change text).
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.ReplaceSel(System.Boolean,System.Int32,System.String)">
            <summary>
            GoToPos and SCI_REPLACESEL.
            </summary>
            <param name="utf16"></param>
            <param name="s">Replacement text. Can be null.</param>
            <param name="pos">Start index.</param>
            <remarks>
            Does not parse tags.
            If read-only, asserts and fails (unlike most other functions that change text).
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.SetAndReplaceSel(System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Sets selection (SCI_SETSEL) and replaces with new text (SCI_REPLACESEL).
            </summary>
            <param name="utf16"></param>
            <param name="from">Start index.</param>
            <param name="to">End index. If -1, uses control text length. Can be less than from.</param>
            <param name="s">Replacement text. Can be null.</param>
            <remarks>
            Does not parse tags.
            If read-only, asserts and fails (unlike most other functions that change text).
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.GoToPos(System.Boolean,System.Int32)">
            <summary>
            SCI_GOTOPOS and ensures visible.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.GoToLine(System.Int32)">
            <summary>
            SCI_GOTOLINE and ensures visible.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.Select(System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            SCI_SETSEL and optionally ensures visible.
            </summary>
            <param name="utf16"></param>
            <param name="from"></param>
            <param name="to">If -1, uses text length. Else <i>to</i> can be less than <i>from</i>. Caret will be at <i>to</i>.</param>
            <param name="makeVisible">Ensure line visible and selection visible. Without it in some cases selection to the left of the caret may be invisible.</param>
        </member>
        <member name="P:Au.Controls.SciText.IsReadonly">
            <summary>
            SCI_GETREADONLY.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.FileLoaderSaver.Load(System.String)">
            <summary>
            Loads file as UTF-8.
            Returns byte[] that must be passed to <see cref="M:Au.Controls.SciText.FileLoaderSaver.SetText(Au.Controls.SciText,System.Byte[])"/>.
            </summary>
            <param name="file">To pass to File.OpenRead.</param>
            <exception cref="T:System.Exception">Exceptions of File.OpenRead, File.Read, Encoding.Convert.</exception>
            <remarks>
            Supports any encoding (UTF-8, UTF-16, etc), BOM. Remembers it for Save.
            If UTF-8 with BOM, the returned array contains BOM (to avoid copying), and <b>SetText</b> knows it.
            If file data is binary or file size is more than 100_000_000, the returned text shows error message or image. Then <b>SetText</b> makes the control read-only; <b>Save</b> throws exception.
            </remarks>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Binary">
            <summary>Not a text file, or loading failed, or not initialized.</summary>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Utf8NoBOM">
            <summary>ASCII or UTF-8 without BOM.</summary>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Utf8BOM">
            <summary>UTF-8 with BOM (3 bytes).</summary>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Ansi">
            <summary>ANSI containing non-ASCII characters, unknown code page.</summary>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Utf16NoBOM">
            <summary>UTF-16 without BOM.</summary>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Utf16BOM">
            <summary>UTF-16 with BOM (2 bytes).</summary>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Utf16BE">
            <summary>UTF-16 with big endian BOM (2 bytes).</summary>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Utf32BOM">
            <summary>UTF-32 with BOM (4 bytes).</summary>
        </member>
        <member name="F:Au.Controls.SciText.FileLoaderSaver._Encoding.Utf32BE">
            <summary>UTF-32 with big endian BOM (4 bytes).</summary>
        </member>
        <member name="M:Au.Controls.SciText.FileLoaderSaver.SetText(Au.Controls.SciText,System.Byte[])">
            <summary>
            Sets control text.
            If the file is binary or too big, shows error message or image, makes the control read-only, and returns false. Else returns true.
            Uses <see cref="T:Au.Controls.SciSetTextFlags"/> NoUndo and NoNotify.
            </summary>
            <param name="z">Control's Z.</param>
            <param name="text">Returned by <b>Load</b>.</param>
        </member>
        <member name="M:Au.Controls.SciText.FileLoaderSaver.Save(Au.Controls.SciText,System.String,System.String)">
            <summary>
            Saves control text with the same encoding/BOM as loaded. Uses <see cref="M:Au.AFile.Save(System.String,System.Action{System.String},System.Boolean,System.String,System.Int32)"/>.
            </summary>
            <param name="z">Control's Z.</param>
            <param name="file">To pass to AFile.Save.</param>
            <param name="tempDirectory">To pass to AFile.Save.</param>
            <exception cref="T:System.Exception">Exceptions of AFile.Save.</exception>
            <exception cref="T:System.InvalidOperationException">The file is binary (then <b>SetText</b> made the control read-only), or <b>Load</b> not called.</exception>
        </member>
        <member name="M:Au.Controls.SciText.GetSelectionLines(System.Boolean,System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.String}@,System.Boolean,System.Boolean)">
            <summary>
            Gets text and offsets of lines containing selection.
            Returns true. If <i>ifFullLines</i> is true, may return false.
            </summary>
            <param name="utf16">Return UTF-16.</param>
            <param name="x">Results.</param>
            <param name="ifFullLines">Fail (return false) if selection length is 0 or selection start is not at a line start.</param>
            <param name="oneMore">Get +1 line if selection ends at a line start, except if selection length is 0.</param>
        </member>
        <member name="M:Au.Controls.SciText.FindText(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            SCI_FINDTEXT.
            </summary>
            <param name="utf16">pos is UTF-16. Return UTF-16.</param>
            <param name="s"></param>
            <param name="start"></param>
            <param name="end">If -1, text length.</param>
        </member>
        <member name="M:Au.Controls.SciText.AddUndoPoint">
            <summary>
            SCI_BEGINUNDOACTION, SCI_ENDUNDOACTION.
            </summary>
        </member>
        <member name="T:Au.Controls.SciTags">
            <summary>
            Adds links and text formatting to an <see cref="T:Au.Controls.AuScintilla"/> control.
            </summary>
            <remarks>
            Links and formatting is specified in text, using tags like in HTML. Depending on control style, may need prefix <c><![CDATA[<>]]></c>.
            Reference: [](output_tags).
            Tags are supported by <see cref="M:Au.AOutput.Write(System.String)"/> when it writes to the Au script editor.
            
            This control does not implement some predefined tags: open, script.
            If used, must be implemented by the program.
            Also you can register custom link tags that call your callback functions.
            See <see cref="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})"/>, <see cref="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})"/>.
            
            Tags are supported by some existing controls based on <see cref="T:Au.Controls.AuScintilla"/>. In the Au editor it is the output (use <see cref="M:Au.AOutput.Write(System.String)"/>, like in the example below). In this library - the <see cref="T:Au.Controls.InfoBox"/> control. To enable tags in other <see cref="T:Au.Controls.AuScintilla"/> controls, use <see cref="P:Au.Controls.AuScintilla.ZInitTagsStyle"/> and optionally <see cref="P:Au.Controls.AuScintilla.ZInitImagesStyle"/>.
            </remarks>
            <example>
            <code><![CDATA[
            AOutput.Write("<>Text with <i>tags<>.");
            ]]></code>
            </example>
        </member>
        <member name="T:Au.Controls.SciTags.UserDefinedStyle">
            <summary>
            For <see cref="M:Au.Controls.SciTags.AddStyleTag(System.String,Au.Controls.SciTags.UserDefinedStyle)"/>.
            </summary>
        </member>
        <member name="M:Au.Controls.SciTags._ClearUserStyles">
            <summary>
            Clears user-defined (through tags) styles.
            Max number of user styles is NUM_STYLES_EX (216). Need to clear old styles before new styles can be defined.
            This func is usually called after clearing control text.
            </summary>
        </member>
        <member name="M:Au.Controls.SciTags.OutputServerProcessMessages(Au.AOutputServer,System.Action{Au.Types.OutServMessage})">
            <summary>
            Displays <see cref="T:Au.AOutputServer"/> messages that are currently in its queue.
            </summary>
            <param name="os">The AOutputServer instance.</param>
            <param name="onMessage">A callback function that can be called when this function gets/removes a message from os.</param>
            <remarks>
            Removes messages from the queue.
            Appends text messages + "\r\n" to the control's text, or clears etc (depends on message).
            Messages with tags must have prefix "&lt;&gt;".
            Limits text length to about 4 MB (removes oldest text when exceeded).
            </remarks>
            <seealso cref="M:Au.AOutputServer.SetNotifications(System.Action,System.Windows.Forms.Control)"/>
        </member>
        <member name="M:Au.Controls.SciTags.AddText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets or appends styled text.
            </summary>
            <param name="text">Text with tags (optionally).</param>
            <param name="appendLine">Append. Also appends "\r\n". Sets caret and scrolls to the end. If false, replaces control text.</param>
            <param name="skipLTGT">If text starts with "&lt;&gt;", skip it.</param>
        </member>
        <member name="M:Au.Controls.SciTags.OnLinkClick_(System.Int32,System.Boolean)">
            <summary>
            Called on SCN_HOTSPOTRELEASECLICK.
            </summary>
        </member>
        <member name="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})">
            <summary>
            Adds (registers) a user-defined link tag for this control.
            </summary>
            <param name="name">
            Tag name, like "+myTag".
            Must start with '+'. Other characters must be 'a'-'z', 'A'-'Z'. Case-sensitive.
            Or can be one of predefined link tags, if you want to override or implement it (some are not implemented by the control).
            If already exists, replaces the delegate.
            </param>
            <param name="a">
            A delegate of a callback function (probably you'll use a lambda) that is called on link click.
            It's string parameter contains tag's attribute (if "&lt;name "attribute"&gt;TEXT&lt;&gt;) or link text (if "&lt;name&gt;TEXT&lt;&gt;).
            The function is called in control's thread. The mouse button is already released. It is safe to do anything with the control, eg replace text.
            </param>
            <remarks>
            Call this function when control handle is already created. Until that <see cref="P:Au.Controls.AuScintilla.ZTags"/> returns null.
            </remarks>
            <seealso cref="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})"/>
        </member>
        <member name="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})">
            <summary>
            Adds (registers) a user-defined link tag for all controls.
            </summary>
            <param name="name">
            Tag name, like "+myTag".
            Must start with '+'. Other characters must be 'a'-'z', 'A'-'Z'. Case-sensitive.
            Or can be one of predefined link tags, if you want to override or implement it (some are not implemented by the control).
            If already exists, replaces the delegate.
            </param>
            <param name="a">
            A delegate of a callback function (probably you'll use a lambda) that is called on link click.
            It's string parameter contains tag's attribute (if "&lt;name "attribute"&gt;TEXT&lt;&gt;) or link text (if "&lt;name&gt;TEXT&lt;&gt;).
            The function is called in control's thread. The mouse button is already released. It is safe to do anything with the control, eg replace text.
            </param>
            <seealso cref="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})"/>
        </member>
        <member name="M:Au.Controls.SciTags.AddStyleTag(System.String,Au.Controls.SciTags.UserDefinedStyle)">
            <summary>
            Adds (registers) a user-defined style tag for this control.
            </summary>
            <param name="name">
            Tag name, like ".my".
            Must start with '.'. Other characters must be 'a'-'z', 'A'-'Z'. Case-sensitive.
            </param>
            <param name="style"></param>
            <exception cref="T:System.ArgumentException">name does not start with '.'.</exception>
            <exception cref="T:System.InvalidOperationException">Trying to add more than 100 styles.</exception>
            <remarks>
            Call this function when control handle is already created. Until that <see cref="P:Au.Controls.AuScintilla.ZTags"/> returns null.
            </remarks>
        </member>
        <member name="T:Au.Controls.SciSetTextFlags">
            <summary>
            Flags for 'set text', 'clear text' and similar functions. Eg you can disable Undo collection or 'changed' notifications.
            Note: Ignores NoUndo and NoNotify if ZInitReadOnlyAlways, because then Undo and notifications are disabled when creating control.
            </summary>
        </member>
        <member name="F:Au.Controls.SciSetTextFlags.NoUndo">
            <summary>
            Cannot be undone. Clear Undo buffer.
            </summary>
        </member>
        <member name="F:Au.Controls.SciSetTextFlags.NoNotify">
            <summary>
            Don't send 'modified' and 'text changed' notifications (don't call overrides and events).
            </summary>
        </member>
        <member name="F:Au.Controls.SciSetTextFlags.NoUndoNoNotify">
            <summary>
            NoUndo | NoNotify.
            </summary>
        </member>
        <member name="T:Au.Controls.GdiTextRenderer">
            <summary>
            Draws text using GDI API such as TextOut using standard UI font.
            Can easily draw string parts with different colors/styles without measuring.
            Faster than TextRenderer.
            Must be disposed.
            </summary>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.MoveTo(System.Int32,System.Int32)">
            <summary>
            Sets the current drawing position of the DC.
            Returns previous position.
            </summary>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.GetCurrentPosition">
            <summary>
            Gets the current drawing position of the DC.
            </summary>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.DrawText(System.String,System.Int32,System.Int32,Au.Types.ColorInt,System.Int32,System.Int32)">
            <summary>
            Draws text at specified position. Does not use/update the current drawing position of the DC.
            </summary>
        </member>
        <member name="M:Au.Controls.GdiTextRenderer.DrawText(System.String,Au.Types.ColorInt,System.Int32,System.Int32)">
            <summary>
            Draws text at the current drawing position of the DC, and updates it.
            </summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.BitmapFileInfo_.biHeader">
            <summary>
            Can be BITMAPINFOHEADER/BITMAPV5HEADER or BITMAPCOREHEADER.
            </summary>
        </member>
        <member name="M:Au.Controls.ImageUtil.GetBitmapFileInfo_(System.Byte[],Au.Controls.ImageUtil.BitmapFileInfo_@)">
            <summary>
            Gets some info from BITMAPINFOHEADER or BITMAPCOREHEADER.
            Checks if it is valid bitmap file header. Returns false if invalid.
            </summary>
        </member>
        <member name="T:Au.Controls.ImageUtil.ImageType">
            <summary>
            Image type as detected by <see cref="M:Au.Controls.ImageUtil.ImageTypeFromString(System.Boolean,System.String)"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.None">
            <summary>The string isn't image.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Base64CompressedBmp">
            <summary>Compressed and Base64-encoded .bmp file data with "~:" prefix. See <see cref="M:Au.Controls.ImageUtil.ImageToString(System.String)"/>.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Base64PngGifJpg">
            <summary>Base64-encoded .png/gif/jpg file data with "image:" prefix.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Resource">
            <summary>"resource:name". An image resource name from managed resources of the entry assembly.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Bmp">
            <summary>.bmp file path.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.PngGifJpg">
            <summary>.png, .gif or .jpg file path.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Ico">
            <summary>.ico file path.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Cur">
            <summary>.cur or .ani file path.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.IconLib">
            <summary>Icon from a .dll or other file containing icons, like @"C:\a\b.dll,15".</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.ShellIcon">
            <summary>None of other image types, when <i>anyFile</i> is true.</summary>
        </member>
        <member name="M:Au.Controls.ImageUtil.ImageTypeFromString(System.Boolean,System.Byte*,System.Int32)">
            <summary>
            Gets image type from string.
            </summary>
            <param name="anyFile">When the string is valid but not of any image type, return ShellIcon instead of None.</param>
            <param name="s">File path etc. See <see cref="T:Au.Controls.ImageUtil.ImageType"/>.</param>
            <param name="length">If -1, calls CharPtr_.Length(s).</param>
        </member>
        <member name="M:Au.Controls.ImageUtil.ImageTypeFromString(System.Boolean,System.String)">
            <summary>
            Gets image type from string.
            </summary>
            <param name="anyFile">When the string is valid but not of any image type, return ShellIcon instead of None.</param>
            <param name="s">File path etc. See <see cref="T:Au.Controls.ImageUtil.ImageType"/>.</param>
        </member>
        <member name="M:Au.Controls.ImageUtil.BmpFileDataFromString(System.String,Au.Controls.ImageUtil.ImageType,System.Boolean)">
            <summary>
            Loads image and returns its data in .bmp file format.
            Returns null if fails, for example file not found or invalid Base64 string.
            </summary>
            <param name="s">Depends on t. File path or resource name without prefix or Base64 image data without prefix.</param>
            <param name="t">Image type and string format.</param>
            <param name="searchPath">Use <see cref="M:Au.AFile.SearchPath(System.String,System.String[])"/></param>
            <remarks>Supports environment variables etc. If not full path, searches in <see cref="P:Au.AFolders.ThisAppImages"/>.</remarks>
        </member>
        <member name="M:Au.Controls.ImageUtil.BmpFileDataToString(System.Byte[])">
            <summary>
            Compresses .bmp file data (<see cref="M:Au.Util.AConvert.Compress(System.Byte[])"/>) and Base64-encodes.
            Returns string with "~:" prefix.
            </summary>
        </member>
        <member name="M:Au.Controls.ImageUtil.ImageToString(System.String)">
            <summary>
            Converts image file data to string that can be used in source code instead of file path. It is supported by some functions of this library, for example <see cref="M:Au.AWinImage.Find(Au.Types.WIArea,Au.Types.WIImage,Au.Types.WIFlags,System.Int32,System.Func{Au.AWinImage,Au.Types.WIAlso})"/>.
            Returns string with prefix "image:" (Base-64 encoded .png/gif/jpg file data) or "~:" (Base-64 encoded compressed .bmp file data).
            Supports all <see cref="T:Au.Controls.ImageUtil.ImageType"/> formats. For non-image files gets icon. Converts icons to bitmap.
            Returns null if path is not a valid image string or the file does not exist or failed to load.
            </summary>
            <remarks>Supports environment variables etc. If not full path, searches in AFolders.ThisAppImages and standard directories.</remarks>
        </member>
    </members>
</doc>
